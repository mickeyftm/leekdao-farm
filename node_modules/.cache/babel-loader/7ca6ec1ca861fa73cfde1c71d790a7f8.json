{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Lottery/components/LotteryCard/LotteryResultCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Card, CardHeader, Flex, Heading, LinkExternal, Button, useModal, Text } from 'leek-uikit';\nimport truncateWalletAddress from \"utils/truncateWalletAddress\";\nimport { getChainExplorerUrl } from 'utils/chainExplorer';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useLottery } from 'hooks/useContract';\nimport styled from \"styled-components\";\nimport WinnerNumberInputModal from '../Modal/WinnerNumberInputModal';\nimport { ColumnCenter } from \"../General/Column\";\nimport ApproveTransactionModal from '../Modal/ApproveTransactionModal';\nimport ConfirmationPendingContent from '../Modal/ConfirmationPendingModal';\nimport ErrorMessageModal from '../Modal/ErrorMessageModal';\nimport { useGetCurrentRound, useGetWinners, useGetNotParticipatedList, updateParticipationStatus } from '../../api';\nimport { store } from \"../../store/store\";\nimport { GET_ADDRESS_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE, UPDATE_ERROR_MESSAGE } from \"../../store/reducer\";\nconst chainId = process.env.REACT_APP_CHAIN_ID;\nconst StyledResultCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-size: contain;\n  max-height: ${({\n  size\n}) => size}px;\n  width: 100%;\n`;\n_c = StyledResultCard;\nconst ResultContainer = styled(ColumnCenter)`\n  padding: 20px 0;\n`;\n_c2 = ResultContainer;\nconst LOTTERY_OWNER = process.env.REACT_APP_LOTTERY_OWNER;\n\nconst LotteryResultCard = () => {\n  _s();\n\n  const winners = useGetWinners();\n  const round = useGetCurrentRound();\n  const {\n    account\n  } = useWallet();\n  const isOwner = LOTTERY_OWNER === account;\n  const notParticpatedList = useGetNotParticipatedList();\n  const [onPresentWinnerNumberInputModal] = useModal( /*#__PURE__*/_jsxDEV(WinnerNumberInputModal, {\n    onDismiss: () => {\n      return null;\n    },\n    account: account\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 56\n  }, this));\n  const [onPresentApproveTransactionModal] = useModal( /*#__PURE__*/_jsxDEV(ApproveTransactionModal, {\n    onDismiss: () => {\n      return null;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 57\n  }, this));\n  const [onPresentConfrimationModal] = useModal( /*#__PURE__*/_jsxDEV(ConfirmationPendingContent, {\n    onDismiss: () => {\n      return null;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 51\n  }, this));\n  const [onPresentErrorMessageModal] = useModal( /*#__PURE__*/_jsxDEV(ErrorMessageModal, {\n    onDismiss: () => {\n      return null;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 51\n  }, this));\n  const contract = useLottery();\n  const state = store.getState();\n  const isAddressSentToContract1 = state.error === \"There are no new participants\";\n  const isAddressSentToContract2 = state.addressTx && state.addressTx.length > 0;\n\n  const submitRequest = async () => {\n    onPresentConfrimationModal();\n    store.dispatch({\n      type: RESET_TO_DEFAULT_STATE\n    });\n\n    if (notParticpatedList.error) {\n      const action = {\n        type: UPDATE_ERROR_MESSAGE,\n        error: notParticpatedList.error\n      };\n      store.dispatch(action);\n      onPresentErrorMessageModal();\n    } else {\n      const result = await contract.methods.participate(notParticpatedList).send({\n        from: account\n      });\n\n      if (result) {\n        const action = {\n          type: GET_ADDRESS_TRANSACTION_HASH,\n          addressTx: result.transactionHash,\n          error: result.error\n        };\n        store.dispatch(action);\n        onPresentApproveTransactionModal();\n        await updateParticipationStatus();\n      }\n    }\n\n    return null;\n  };\n\n  let comp;\n\n  if (winners && winners.length > 0) {\n    comp = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        color: \"primary\",\n        children: [\"Congratulations! \", winners.length === 1 ? \"Winner is:\" : \"Winners are\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ResultContainer, {\n        children: winners.map(item => /*#__PURE__*/_jsxDEV(LinkExternal, {\n          href: getChainExplorerUrl(chainId, item),\n          fontSize: \"18px\",\n          children: [\" \\uD83C\\uDFC6 \", truncateWalletAddress(item)]\n        }, item, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 16\n    }, this);\n  } else {\n    comp = /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      padding: \"20px\",\n      children: /*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h5\",\n        style: {\n          textAlign: \"center\",\n          lineHeight: \"1.5\"\n        },\n        children: \"No winners Found. Let us expect who will be the winner.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledResultCard, {\n    size: 250 + winners.length * 30,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: \"Last Round Winner(s)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), round > 0 ? /*#__PURE__*/_jsxDEV(Text, {\n          children: [\"Round: #\", round - 1]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 37\n        }, this) : \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"20px\"\n      },\n      children: [comp, isOwner && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: submitRequest,\n            disabled: isAddressSentToContract1 || isAddressSentToContract2,\n            children: \"Approve\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onPresentWinnerNumberInputModal,\n            disabled: !isAddressSentToContract1 && !isAddressSentToContract2,\n            children: \"Lucky Draw\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LotteryResultCard, \"TBeXwpXtuIpvzkgiq7zcA+p9MB4=\", false, function () {\n  return [useGetWinners, useGetCurrentRound, useWallet, useGetNotParticipatedList, useModal, useModal, useModal, useModal, useLottery];\n});\n\n_c3 = LotteryResultCard;\nexport default LotteryResultCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledResultCard\");\n$RefreshReg$(_c2, \"ResultContainer\");\n$RefreshReg$(_c3, \"LotteryResultCard\");","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Lottery/components/LotteryCard/LotteryResultCard.tsx"],"names":["React","Card","CardHeader","Flex","Heading","LinkExternal","Button","useModal","Text","truncateWalletAddress","getChainExplorerUrl","useWallet","useLottery","styled","WinnerNumberInputModal","ColumnCenter","ApproveTransactionModal","ConfirmationPendingContent","ErrorMessageModal","useGetCurrentRound","useGetWinners","useGetNotParticipatedList","updateParticipationStatus","store","GET_ADDRESS_TRANSACTION_HASH","RESET_TO_DEFAULT_STATE","UPDATE_ERROR_MESSAGE","chainId","process","env","REACT_APP_CHAIN_ID","StyledResultCard","size","ResultContainer","LOTTERY_OWNER","REACT_APP_LOTTERY_OWNER","LotteryResultCard","winners","round","account","isOwner","notParticpatedList","onPresentWinnerNumberInputModal","onPresentApproveTransactionModal","onPresentConfrimationModal","onPresentErrorMessageModal","contract","state","getState","isAddressSentToContract1","error","isAddressSentToContract2","addressTx","length","submitRequest","dispatch","type","action","result","methods","participate","send","from","transactionHash","comp","map","item","textAlign","lineHeight","padding"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    Card,\n    CardHeader,\n    Flex,\n    Heading,\n    LinkExternal,\n    Button,\n    useModal,\n    Text,\n} from 'leek-uikit'\nimport truncateWalletAddress from \"utils/truncateWalletAddress\"\nimport { getChainExplorerUrl } from 'utils/chainExplorer'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport styled from \"styled-components\"\nimport WinnerNumberInputModal from '../Modal/WinnerNumberInputModal'\nimport { ColumnCenter } from \"../General/Column\"\nimport ApproveTransactionModal from '../Modal/ApproveTransactionModal'\nimport ConfirmationPendingContent from '../Modal/ConfirmationPendingModal'\nimport ErrorMessageModal from '../Modal/ErrorMessageModal'\nimport { useGetCurrentRound, useGetWinners, useGetNotParticipatedList, updateParticipationStatus } from '../../api'\nimport { store } from \"../../store/store\"\nimport { GET_ADDRESS_TRANSACTION_HASH, RESET_TO_DEFAULT_STATE, UPDATE_ERROR_MESSAGE } from \"../../store/reducer\"\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nconst StyledResultCard = styled(Card) <{ size: number }>`\n  background-repeat: no-repeat;\n  background-size: contain;\n  max-height: ${({ size }) => size}px;\n  width: 100%;\n`\n\nconst ResultContainer = styled(ColumnCenter)`\n  padding: 20px 0;\n`\n\nconst LOTTERY_OWNER = process.env.REACT_APP_LOTTERY_OWNER\n\nconst LotteryResultCard: React.FC = () => {\n    const winners = useGetWinners()\n    const round = useGetCurrentRound();\n    const { account } = useWallet();\n    const isOwner = LOTTERY_OWNER === account\n    const notParticpatedList = useGetNotParticipatedList()\n    const [onPresentWinnerNumberInputModal] = useModal(<WinnerNumberInputModal onDismiss={() => { return null }} account={account} />)\n    const [onPresentApproveTransactionModal] = useModal(<ApproveTransactionModal onDismiss={() => { return null }} />)\n    const [onPresentConfrimationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const [onPresentErrorMessageModal] = useModal(<ErrorMessageModal onDismiss={() => { return null }} />)\n    const contract = useLottery();\n    const state = store.getState()\n    const isAddressSentToContract1 = state.error === \"There are no new participants\"\n    const isAddressSentToContract2 = state.addressTx && state.addressTx.length > 0\n\n    const submitRequest = async () => {\n        onPresentConfrimationModal();\n        store.dispatch({ type: RESET_TO_DEFAULT_STATE })\n        if (notParticpatedList.error) {\n            const action = {\n                type: UPDATE_ERROR_MESSAGE,\n                error: notParticpatedList.error,\n            }\n            store.dispatch(action);\n            onPresentErrorMessageModal()\n        } else {\n            const result = await contract.methods.participate(notParticpatedList).send({ from: account })\n            if (result) {\n                const action = {\n                    type: GET_ADDRESS_TRANSACTION_HASH,\n                    addressTx: result.transactionHash,\n                    error: result.error,\n                }\n                store.dispatch(action);\n                onPresentApproveTransactionModal();\n                await updateParticipationStatus();\n            }\n        }\n\n        return null;\n\n\n    }\n\n    let comp;\n\n    if (winners && winners.length > 0) {\n        comp = <div>\n            <Heading color=\"primary\">Congratulations! {winners.length === 1 ? \"Winner is:\" : \"Winners are\"}</Heading>\n            <ResultContainer>\n                {\n                    winners.map((item) => (\n                        <LinkExternal key={item} href={getChainExplorerUrl(chainId, item)} fontSize=\"18px\"> 🏆 {truncateWalletAddress(item)}</LinkExternal>\n                    ))\n                }\n\n            </ResultContainer>\n        </div>\n    } else {\n        comp = <Flex alignItems=\"center\" justifyContent=\"center\" padding=\"20px\">\n            <Heading as=\"h5\" style={{ textAlign: \"center\", lineHeight: \"1.5\" }}>No winners Found. Let us expect who will be the winner.</Heading>\n        </Flex>\n\n    }\n\n    return (\n        <StyledResultCard size={250 + winners.length * 30}>\n            <CardHeader>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Heading>Last Round Winner(s)</Heading>\n                    {\n                        round > 0 ? <Text>Round: #{round - 1}</Text> : \"\"\n                    }\n\n                </Flex>\n            </CardHeader>\n\n            <div style={{ padding: \"20px\" }}>\n                {comp}\n                {\n                    isOwner && (\n\n                        <div>\n                            <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                                <Button onClick={submitRequest} disabled={isAddressSentToContract1 || isAddressSentToContract2}>Approve</Button>\n                                <Button onClick={onPresentWinnerNumberInputModal} disabled={!isAddressSentToContract1 && !isAddressSentToContract2}>Lucky Draw</Button>\n                            </Flex>\n                        </div>\n                    )\n                }\n            </div>\n\n        </StyledResultCard>\n    )\n}\n\nexport default LotteryResultCard"]},"metadata":{},"sourceType":"module"}