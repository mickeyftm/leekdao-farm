{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Ifos/components/IfoCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport BigNumber from 'bignumber.js';\nimport { Card, CardBody, CardRibbon, Button, useModal } from 'leek-uikit';\nimport moment from 'moment';\nimport useI18n from 'hooks/useI18n';\nimport { useIfoContract } from 'hooks/useContract';\nimport UnlockButton from 'components/UnlockButton';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport useRefresh from 'hooks/useRefresh';\nimport IfoCardHeader from './IfoCardHeader';\nimport ParticipateModal from './ParticipateModal';\nimport IfoCardProgress from './IfoCardProgress';\nimport IfoCardDetails from './IfoCardDetails';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nconst StyledIfoCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 437px;\n  width: 100%;\n`;\n_c = StyledIfoCard;\nconst Divider = styled.div`\n  background-color: ${({\n  theme\n}) => theme.colors.borderColor};\n  height: 1px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`;\n_c2 = Divider;\n\nconst getStatus = (isOpen, hasClosed) => {\n  if (!isOpen && !hasClosed) {\n    return 'coming_soon';\n  }\n\n  if (isOpen && !hasClosed) {\n    return 'live';\n  }\n\n  if (!isOpen && hasClosed) {\n    return 'finished';\n  }\n\n  return null;\n};\n\nconst getRibbonComponent = (status, TranslateString) => {\n  if (status === 'coming_soon') {\n    return /*#__PURE__*/_jsxDEV(CardRibbon, {\n      variantColor: \"textDisabled\",\n      text: TranslateString(999, 'Coming Soon')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'finished') {\n    return /*#__PURE__*/_jsxDEV(CardRibbon, {\n      variantColor: \"primary\",\n      text: TranslateString(999, 'FINISHED')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (status === 'live') {\n    return /*#__PURE__*/_jsxDEV(CardRibbon, {\n      variantColor: \"primary\",\n      text: TranslateString(999, 'LIVE NOW!')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }, this);\n  }\n\n  return null;\n};\n\nconst IfoCard = ({\n  ifo\n}) => {\n  _s();\n\n  const {\n    id,\n    idoAddress,\n    name,\n    mainToken,\n    subTitle,\n    startTime,\n    endTime,\n    salesAmount,\n    projectSiteUrl\n  } = ifo;\n  const [state, setState] = useState({\n    isLoading: true,\n    status: null,\n    openingTime: 0,\n    closingTime: 0,\n    rate: 0,\n    availableToken: 0\n  });\n  const {\n    account\n  } = useWallet();\n  const contract = useIfoContract(idoAddress[CHAIN_ID]);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const TranslateString = useI18n();\n  const Ribbon = getRibbonComponent(state.status, TranslateString);\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [openingTime, closingTime, isOpen, hasClosed, rate, availableToken] = await Promise.all([contract.methods._openingTime().call(), contract.methods._closingTime().call(), contract.methods.isOpen().call(), contract.methods.hasClosed().call(), contract.methods._rate().call(), contract.methods.remainingTokens().call()]);\n      const status = getStatus(isOpen, hasClosed);\n      setState({\n        isLoading: false,\n        status,\n        openingTime,\n        closingTime,\n        rate,\n        availableToken\n      });\n    };\n\n    fetchProgress();\n  }, [contract, fastRefresh, setState]);\n  const isActive = state.status === 'live';\n  const isFinished = state.status === 'finished';\n  const launchTime = moment.utc(Number(state.openingTime) * 1000).format('MMMM Do YYYY, HH:mm') || moment.utc(startTime * 1000).format('MMMM Do YYYY, HH:mm');\n  const closingTime = moment.utc(Number(state.closingTime) * 1000).format('MMMM Do YYYY, HH:mm') || moment.utc(endTime * 1000).format('MMMM Do YYYY, HH:mm');\n  const remainingTokens = getBalanceNumber(new BigNumber(state.availableToken));\n  const progress = isActive || isFinished ? (salesAmount - remainingTokens) / salesAmount * 100 : 0;\n  const [onPresentParticipateModal] = useModal( /*#__PURE__*/_jsxDEV(ParticipateModal, {\n    tokenName: name,\n    contract: contract,\n    mainToken: mainToken,\n    rate: state.rate\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(StyledIfoCard, {\n      ifoId: id,\n      ribbon: Ribbon,\n      isActive: isActive,\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(IfoCardHeader, {\n          ifoId: id,\n          name: name,\n          subTitle: subTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IfoCardProgress, {\n          progress: progress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), !account ? /*#__PURE__*/_jsxDEV(UnlockButton, {\n          fullWidth: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          fullWidth: true,\n          onClick: onPresentParticipateModal,\n          disabled: !isActive,\n          children: \"Participate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IfoCardDetails, {\n          launchTime: launchTime,\n          closingTime: closingTime,\n          projectSiteUrl: projectSiteUrl,\n          salesAmount: salesAmount,\n          rate: state.rate,\n          mainToken: mainToken,\n          tokenName: name,\n          availableToken: state.availableToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(IfoCard, \"vzZzeHWMu4F0CHe3uOp77yMPp54=\", false, function () {\n  return [useWallet, useIfoContract, useRefresh, useI18n, useModal];\n});\n\n_c3 = IfoCard;\nexport default IfoCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledIfoCard\");\n$RefreshReg$(_c2, \"Divider\");\n$RefreshReg$(_c3, \"IfoCard\");","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Ifos/components/IfoCard/index.tsx"],"names":["React","useEffect","useState","styled","useWallet","BigNumber","Card","CardBody","CardRibbon","Button","useModal","moment","useI18n","useIfoContract","UnlockButton","getBalanceNumber","useRefresh","IfoCardHeader","ParticipateModal","IfoCardProgress","IfoCardDetails","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","StyledIfoCard","Divider","div","theme","colors","borderColor","getStatus","isOpen","hasClosed","getRibbonComponent","status","TranslateString","IfoCard","ifo","id","idoAddress","name","mainToken","subTitle","startTime","endTime","salesAmount","projectSiteUrl","state","setState","isLoading","openingTime","closingTime","rate","availableToken","account","contract","fastRefresh","Ribbon","fetchProgress","Promise","all","methods","_openingTime","call","_closingTime","_rate","remainingTokens","isActive","isFinished","launchTime","utc","Number","format","progress","onPresentParticipateModal"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { Card, CardBody, CardRibbon, Button, useModal } from 'leek-uikit'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport moment from 'moment'\nimport useI18n from 'hooks/useI18n'\nimport { useIfoContract } from 'hooks/useContract'\nimport UnlockButton from 'components/UnlockButton'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useRefresh from 'hooks/useRefresh'\nimport IfoCardHeader from './IfoCardHeader'\nimport ParticipateModal from './ParticipateModal'\nimport IfoCardProgress from './IfoCardProgress'\nimport IfoCardDetails from './IfoCardDetails'\n\n\nexport interface IfoCardProps {\n  ifo: Ifo\n}\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst StyledIfoCard = styled(Card) <{ ifoId: string }>`\n  background-repeat: no-repeat;\n  background-size: contain;\n  padding-top: 10px;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 437px;\n  width: 100%;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  width: 100%;\n`\n\nconst getStatus = (isOpen: boolean | null, hasClosed: boolean | null) => {\n  if (!isOpen && !hasClosed) {\n    return 'coming_soon'\n  }\n\n  if (isOpen && !hasClosed) {\n    return 'live'\n  }\n\n  if (!isOpen && hasClosed) {\n    return 'finished'\n  }\n\n  return null\n}\n\nconst getRibbonComponent = (status: IfoStatus, TranslateString: (translationId: number, fallback: string) => any) => {\n  if (status === 'coming_soon') {\n    return <CardRibbon variantColor=\"textDisabled\" text={TranslateString(999, 'Coming Soon')} />\n  }\n\n  if (status === 'finished') {\n    return <CardRibbon variantColor=\"primary\" text={TranslateString(999, 'FINISHED')} />\n  }\n\n  if (status === 'live') {\n    return <CardRibbon variantColor=\"primary\" text={TranslateString(999, 'LIVE NOW!')} />\n  }\n\n  return null\n}\n\nconst IfoCard: React.FC<IfoCardProps> = ({ ifo }) => {\n  const { id, idoAddress, name, mainToken, subTitle, startTime, endTime, salesAmount, projectSiteUrl } = ifo\n  const [state, setState] = useState({\n    isLoading: true,\n    status: null,\n    openingTime: 0,\n    closingTime: 0,\n    rate: 0,\n    availableToken: 0,\n  })\n\n  const { account } = useWallet()\n  const contract = useIfoContract(idoAddress[CHAIN_ID])\n  const { fastRefresh } = useRefresh()\n\n  const TranslateString = useI18n()\n\n  const Ribbon = getRibbonComponent(state.status, TranslateString)\n\n  useEffect(() => {\n    const fetchProgress = async () => {\n      const [openingTime, closingTime, isOpen, hasClosed, rate, availableToken] = await Promise.all([\n        contract.methods._openingTime().call(),\n        contract.methods._closingTime().call(),\n        contract.methods.isOpen().call(),\n        contract.methods.hasClosed().call(),\n        contract.methods._rate().call(),\n        contract.methods.remainingTokens().call(),\n      ])\n\n      const status = getStatus(isOpen, hasClosed)\n\n      setState({\n        isLoading: false,\n        status,\n        openingTime,\n        closingTime,\n        rate,\n        availableToken,\n      })\n    }\n\n    fetchProgress()\n  }, [contract, fastRefresh, setState])\n\n  const isActive = state.status === 'live'\n  const isFinished = state.status === 'finished'\n\n  const launchTime =\n    moment.utc(Number(state.openingTime) * 1000).format('MMMM Do YYYY, HH:mm') ||\n    moment.utc(startTime * 1000).format('MMMM Do YYYY, HH:mm')\n\n  const closingTime =\n    moment.utc(Number(state.closingTime) * 1000).format('MMMM Do YYYY, HH:mm') ||\n    moment.utc(endTime * 1000).format('MMMM Do YYYY, HH:mm')\n\n  const remainingTokens = getBalanceNumber(new BigNumber(state.availableToken))\n\n  const progress = isActive || isFinished ? ((salesAmount - remainingTokens) / salesAmount) * 100 : 0\n\n  const [onPresentParticipateModal] = useModal(\n    <ParticipateModal tokenName={name} contract={contract} mainToken={mainToken} rate={state.rate} />,\n  )\n\n  return (\n    <>\n      <StyledIfoCard ifoId={id} ribbon={Ribbon} isActive={isActive}>\n        <CardBody>\n          <IfoCardHeader ifoId={id} name={name} subTitle={subTitle} />\n          <IfoCardProgress progress={progress} />\n          {!account ? (\n            <UnlockButton fullWidth />\n          ) : (\n            <Button fullWidth onClick={onPresentParticipateModal} disabled={!isActive}>\n              Participate\n            </Button>\n          )}\n          <Divider />\n          <IfoCardDetails\n            launchTime={launchTime}\n            closingTime={closingTime}\n            projectSiteUrl={projectSiteUrl}\n            salesAmount={salesAmount}\n            rate={state.rate}\n            mainToken={mainToken}\n            tokenName={name}\n            availableToken={state.availableToken}\n          />\n        </CardBody>\n      </StyledIfoCard>\n    </>\n  )\n}\n\nexport default IfoCard\n"]},"metadata":{},"sourceType":"module"}