{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useBillboardContract } from \"hooks/useContract\";\nimport useRefresh from \"hooks/useRefresh\";\nimport { billboardStore } from '../store/store';\nexport const useGetBaseInfo = () => {\n  _s();\n\n  const [baseInfo, setBaseInfo] = useState();\n  const contract = useBillboardContract();\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const [basePrice, minimumTokenAmount] = await Promise.all([contract.methods.basePrice().call(), contract.methods.minimumTokenAmountToCreate().call()]);\n\n        if (mounted) {\n          setBaseInfo({\n            basePrice,\n            minimumTokenAmount\n          });\n        }\n      } catch (err) {\n        console.error(\"Unable to fetch base price\", err.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [contract.methods]);\n  return baseInfo;\n};\n\n_s(useGetBaseInfo, \"9EjS+TM91W9vctjf3wGhOo4k0JQ=\", false, function () {\n  return [useBillboardContract];\n});\n\nexport const useGetBillboardDetails = () => {\n  _s2();\n\n  const [billboardDetails, setBillboardDetails] = useState(null);\n  const contract = useBillboardContract();\n  const cities = billboardStore.getState();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const billboards = await contract.methods.getAllBillBoards().call();\n        const newBillboards = {};\n        billboards.forEach(billboard => {\n          const {\n            id,\n            desc,\n            owner,\n            ipfsHash,\n            bidLevel\n          } = billboard;\n          const isBid = billboard.init;\n          newBillboards[id] = {\n            id,\n            desc,\n            isBid,\n            owner,\n            ipfsHash,\n            bidLevel\n          };\n        });\n        const billboardsDetails = [];\n        cities.forEach(city => {\n          const {\n            id\n          } = city;\n          const billboardData = newBillboards[id];\n\n          if (billboardData) {\n            billboardsDetails.push({ ...city,\n              ...billboardData\n            });\n          } else {\n            billboardsDetails.push(city);\n          }\n        });\n\n        if (mounted) {\n          setBillboardDetails(billboardsDetails);\n        }\n      } catch (err) {\n        console.error(\"Unable to fetch billboard details\", err.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [contract.methods, billboardDetails, cities, slowRefresh]);\n  return billboardDetails;\n};\n\n_s2(useGetBillboardDetails, \"o+5egQMEsYMOZddKrGnSwksgE1o=\", false, function () {\n  return [useBillboardContract, useRefresh];\n});","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Billboard/api/index.ts"],"names":["useEffect","useState","useBillboardContract","useRefresh","billboardStore","useGetBaseInfo","baseInfo","setBaseInfo","contract","mounted","fetchData","basePrice","minimumTokenAmount","Promise","all","methods","call","minimumTokenAmountToCreate","err","console","error","response","useGetBillboardDetails","billboardDetails","setBillboardDetails","cities","getState","slowRefresh","billboards","getAllBillBoards","newBillboards","forEach","billboard","id","desc","owner","ipfsHash","bidLevel","isBid","init","billboardsDetails","city","billboardData","push"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useBillboardContract } from \"hooks/useContract\"\nimport useRefresh from \"hooks/useRefresh\"\nimport { billboardStore } from '../store/store';\n\n\ninterface billboardBaseInfo {\n    basePrice: number\n    minimumTokenAmount: number\n}\n\nexport const useGetBaseInfo = () => {\n    const [baseInfo, setBaseInfo] = useState<billboardBaseInfo>()\n    const contract = useBillboardContract()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const [basePrice, minimumTokenAmount] = await Promise.all([\n                    contract.methods.basePrice().call(),\n                    contract.methods.minimumTokenAmountToCreate().call(),\n                ])\n\n                if (mounted) {\n                    setBaseInfo({\n                        basePrice,\n                        minimumTokenAmount\n                    })\n                }\n            } catch (err) {\n                console.error(\"Unable to fetch base price\", err.response)\n            }\n        }\n        fetchData();\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods])\n    return baseInfo\n}\n\nexport const useGetBillboardDetails = () => {\n    const [billboardDetails, setBillboardDetails] = useState(null)\n    const contract = useBillboardContract()\n    const cities = billboardStore.getState()\n    const { slowRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const billboards = await contract.methods.getAllBillBoards().call();\n                const newBillboards = {}\n\n                billboards.forEach(billboard => {\n                    const { id, desc, owner, ipfsHash, bidLevel } = billboard;\n                    const isBid = billboard.init;\n\n                    newBillboards[id] = {\n                        id,\n                        desc,\n                        isBid,\n                        owner,\n                        ipfsHash,\n                        bidLevel\n                    }\n                })\n\n                const billboardsDetails = []\n\n                cities.forEach(city => {\n                    const { id } = city\n                    const billboardData = newBillboards[id];\n\n                    if (billboardData) {\n                        billboardsDetails.push({\n                            ...city,\n                            ...billboardData\n                        })\n                    } else {\n                        billboardsDetails.push(city)\n                    }\n                })\n\n                if (mounted) {\n                    setBillboardDetails(billboardsDetails)\n                }\n\n            } catch (err) {\n                console.error(\"Unable to fetch billboard details\", err.response)\n            }\n        }\n        fetchData();\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, billboardDetails, cities, slowRefresh])\n    return billboardDetails\n}"]},"metadata":{},"sourceType":"module"}