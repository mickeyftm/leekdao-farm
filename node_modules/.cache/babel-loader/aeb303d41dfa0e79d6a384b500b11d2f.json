{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst crypto = self.crypto || self.msCrypto;\n\nmodule.exports = algorithm => {\n  if (typeof self === 'undefined' || !self.crypto && !self.msCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n\n  return async data => {\n    switch (algorithm) {\n      case 'sha1':\n        return Buffer.from(await crypto.subtle.digest({\n          name: 'SHA-1'\n        }, data));\n\n      case 'sha2-256':\n        return Buffer.from(await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, data));\n\n      case 'sha2-512':\n        return Buffer.from(await crypto.subtle.digest({\n          name: 'SHA-512'\n        }, data));\n\n      case 'dbl-sha2-256':\n        {\n          const d = await crypto.subtle.digest({\n            name: 'SHA-256'\n          }, data);\n          return Buffer.from(await crypto.subtle.digest({\n            name: 'SHA-256'\n          }, d));\n        }\n\n      default:\n        throw new Error(`${algorithm} is not a supported algorithm`);\n    }\n  };\n};","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/node_modules/ipld-dag-pb/node_modules/multihashing-async/src/sha.browser.js"],"names":["Buffer","require","crypto","self","msCrypto","module","exports","algorithm","Error","data","from","subtle","digest","name","d"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEA,MAAMC,MAAM,GAAGC,IAAI,CAACD,MAAL,IAAeC,IAAI,CAACC,QAAnC;;AAEAC,MAAM,CAACC,OAAP,GAAkBC,SAAD,IAAe;AAC9B,MAAI,OAAOJ,IAAP,KAAgB,WAAhB,IAAgC,CAACA,IAAI,CAACD,MAAN,IAAgB,CAACC,IAAI,CAACC,QAA1D,EAAqE;AACnE,UAAM,IAAII,KAAJ,CACJ,2IADI,CAAN;AAGD;;AAED,SAAO,MAAOC,IAAP,IAAgB;AACrB,YAAQF,SAAR;AACE,WAAK,MAAL;AACE,eAAOP,MAAM,CAACU,IAAP,CAAY,MAAMR,MAAM,CAACS,MAAP,CAAcC,MAAd,CAAqB;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAArB,EAAwCJ,IAAxC,CAAlB,CAAP;;AACF,WAAK,UAAL;AACE,eAAOT,MAAM,CAACU,IAAP,CAAY,MAAMR,MAAM,CAACS,MAAP,CAAcC,MAAd,CAAqB;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAArB,EAA0CJ,IAA1C,CAAlB,CAAP;;AACF,WAAK,UAAL;AACE,eAAOT,MAAM,CAACU,IAAP,CAAY,MAAMR,MAAM,CAACS,MAAP,CAAcC,MAAd,CAAqB;AAAEC,UAAAA,IAAI,EAAE;AAAR,SAArB,EAA0CJ,IAA1C,CAAlB,CAAP;;AACF,WAAK,cAAL;AAAqB;AACnB,gBAAMK,CAAC,GAAG,MAAMZ,MAAM,CAACS,MAAP,CAAcC,MAAd,CAAqB;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAArB,EAA0CJ,IAA1C,CAAhB;AACA,iBAAOT,MAAM,CAACU,IAAP,CAAY,MAAMR,MAAM,CAACS,MAAP,CAAcC,MAAd,CAAqB;AAAEC,YAAAA,IAAI,EAAE;AAAR,WAArB,EAA0CC,CAA1C,CAAlB,CAAP;AACD;;AACD;AACE,cAAM,IAAIN,KAAJ,CAAW,GAAED,SAAU,+BAAvB,CAAN;AAZJ;AAcD,GAfD;AAgBD,CAvBD","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer')\n\nconst crypto = self.crypto || self.msCrypto\n\nmodule.exports = (algorithm) => {\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context'\n    )\n  }\n\n  return async (data) => {\n    switch (algorithm) {\n      case 'sha1':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-1' }, data))\n      case 'sha2-256':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, data))\n      case 'sha2-512':\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-512' }, data))\n      case 'dbl-sha2-256': {\n        const d = await crypto.subtle.digest({ name: 'SHA-256' }, data)\n        return Buffer.from(await crypto.subtle.digest({ name: 'SHA-256' }, d))\n      }\n      default:\n        throw new Error(`${algorithm} is not a supported algorithm`)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}