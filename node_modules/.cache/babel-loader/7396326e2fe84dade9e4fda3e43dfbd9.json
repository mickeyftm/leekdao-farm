{"ast":null,"code":"'use strict';\n\nconst DAGLink = require('./../dag-link');\n\nconst {\n  cid,\n  serialize\n} = require('../util');\n\nexports = module.exports;\n\nfunction cloneData(dagNode) {\n  let data;\n\n  if (dagNode.Data && dagNode.Data.length > 0) {\n    data = Buffer.alloc(dagNode.Data.length);\n    dagNode.Data.copy(data);\n  } else {\n    data = Buffer.alloc(0);\n  }\n\n  return data;\n}\n\nfunction cloneLinks(dagNode) {\n  return dagNode.Links.slice();\n}\n\nfunction linkSort(a, b) {\n  return Buffer.compare(a.nameAsBuffer, b.nameAsBuffer);\n}\n/*\n * toDAGLink converts a DAGNode to a DAGLink\n */\n\n\nconst toDAGLink = async (node, options = {}) => {\n  const serialized = serialize(node);\n  const nodeCid = await cid(serialized);\n  return new DAGLink(options.name || '', serialized.length, nodeCid);\n};\n\nexports.cloneData = cloneData;\nexports.cloneLinks = cloneLinks;\nexports.linkSort = linkSort;\nexports.toDAGLink = toDAGLink;","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/node_modules/ipld-dag-pb/src/dag-node/util.js"],"names":["DAGLink","require","cid","serialize","exports","module","cloneData","dagNode","data","Data","length","Buffer","alloc","copy","cloneLinks","Links","slice","linkSort","a","b","compare","nameAsBuffer","toDAGLink","node","options","serialized","nodeCid","name"],"mappings":"AAAA;;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAM;AACJC,EAAAA,GADI;AAEJC,EAAAA;AAFI,IAGFF,OAAO,CAAC,SAAD,CAHX;;AAKAG,OAAO,GAAGC,MAAM,CAACD,OAAjB;;AAEA,SAASE,SAAT,CAAoBC,OAApB,EAA6B;AAC3B,MAAIC,IAAJ;;AAEA,MAAID,OAAO,CAACE,IAAR,IAAgBF,OAAO,CAACE,IAAR,CAAaC,MAAb,GAAsB,CAA1C,EAA6C;AAC3CF,IAAAA,IAAI,GAAGG,MAAM,CAACC,KAAP,CAAaL,OAAO,CAACE,IAAR,CAAaC,MAA1B,CAAP;AACAH,IAAAA,OAAO,CAACE,IAAR,CAAaI,IAAb,CAAkBL,IAAlB;AACD,GAHD,MAGO;AACLA,IAAAA,IAAI,GAAGG,MAAM,CAACC,KAAP,CAAa,CAAb,CAAP;AACD;;AAED,SAAOJ,IAAP;AACD;;AAED,SAASM,UAAT,CAAqBP,OAArB,EAA8B;AAC5B,SAAOA,OAAO,CAACQ,KAAR,CAAcC,KAAd,EAAP;AACD;;AAED,SAASC,QAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AACvB,SAAOR,MAAM,CAACS,OAAP,CAAeF,CAAC,CAACG,YAAjB,EAA+BF,CAAC,CAACE,YAAjC,CAAP;AACD;AAED;AACA;AACA;;;AACA,MAAMC,SAAS,GAAG,OAAOC,IAAP,EAAaC,OAAO,GAAG,EAAvB,KAA8B;AAC9C,QAAMC,UAAU,GAAGtB,SAAS,CAACoB,IAAD,CAA5B;AACA,QAAMG,OAAO,GAAG,MAAMxB,GAAG,CAACuB,UAAD,CAAzB;AACA,SAAO,IAAIzB,OAAJ,CAAYwB,OAAO,CAACG,IAAR,IAAgB,EAA5B,EAAgCF,UAAU,CAACf,MAA3C,EAAmDgB,OAAnD,CAAP;AACD,CAJD;;AAMAtB,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACU,UAAR,GAAqBA,UAArB;AACAV,OAAO,CAACa,QAAR,GAAmBA,QAAnB;AACAb,OAAO,CAACkB,SAAR,GAAoBA,SAApB","sourcesContent":["'use strict'\n\nconst DAGLink = require('./../dag-link')\nconst {\n  cid,\n  serialize\n} = require('../util')\n\nexports = module.exports\n\nfunction cloneData (dagNode) {\n  let data\n\n  if (dagNode.Data && dagNode.Data.length > 0) {\n    data = Buffer.alloc(dagNode.Data.length)\n    dagNode.Data.copy(data)\n  } else {\n    data = Buffer.alloc(0)\n  }\n\n  return data\n}\n\nfunction cloneLinks (dagNode) {\n  return dagNode.Links.slice()\n}\n\nfunction linkSort (a, b) {\n  return Buffer.compare(a.nameAsBuffer, b.nameAsBuffer)\n}\n\n/*\n * toDAGLink converts a DAGNode to a DAGLink\n */\nconst toDAGLink = async (node, options = {}) => {\n  const serialized = serialize(node)\n  const nodeCid = await cid(serialized)\n  return new DAGLink(options.name || '', serialized.length, nodeCid)\n}\n\nexports.cloneData = cloneData\nexports.cloneLinks = cloneLinks\nexports.linkSort = linkSort\nexports.toDAGLink = toDAGLink\n"]},"metadata":{},"sourceType":"script"}