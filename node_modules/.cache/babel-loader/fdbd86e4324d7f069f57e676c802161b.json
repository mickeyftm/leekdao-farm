{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Billboard/Map/BillboardForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport ipfsClient from 'ipfs-http-client';\nimport styled from 'styled-components';\nimport { getBalanceNumber } from \"utils/formatBalance\";\nimport { Text, Button, Input, Heading, Flex, useModal } from \"leek-uikit\";\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport UnlockButton from 'components/UnlockButton';\nimport { useBillboardApprove } from 'hooks/useApprove';\nimport { getCakeAddress, getBillboardAddress } from 'utils/addressHelpers';\nimport { useERC20, useBillboardContract } from 'hooks/useContract';\nimport { useBillboardAllowance } from 'hooks/useAllowance';\nimport useTokenBalance from 'hooks/useTokenBalance';\nimport BigNumber from 'bignumber.js';\nimport validator from \"validator\";\nimport ConfirmationPendingContent from '../Modal/ConfirmationPendeingContent';\nimport BillboardBidModal from '../Modal/BillboardBidModal';\nimport { GET_BID_BILLBOARD_HASH, HIDE_FORM } from '../store/reducer';\nimport { store, bidStore } from \"../store/store\";\nimport { useGetBaseInfo } from '../api';\nconst ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\nconst FormLayout = styled.div`\n    padding:30px;\n\n    @media (max-width: 768px) {\n        padding:20px\n    }\n`;\n_c = FormLayout;\nconst Textarea = styled.textarea`\n    background-color: #eeeaf4;\n    border: 0;\n    border-radius: 16px;\n    box-shadow: inset 0px 2px 2px -1px rgb(74 74 104 / 10%);\n    color: #452A7A;\n    display: block;\n    font-size: 16px;\n    height: 100px;\n    outline: 0;\n    width: 100%;\n    padding:15px;\n`;\n_c2 = Textarea;\n\nconst BillboardForm = props => {\n  _s();\n\n  const {\n    info\n  } = props;\n  const {\n    id,\n    city\n  } = info;\n  const {\n    account\n  } = useWallet();\n  const [description, setDescription] = useState(\"\");\n  const [buffer, setBuffer] = useState(null);\n  const [file, setFile] = useState(null);\n  const [validImage, setValidImage] = useState(true);\n  const [validDescription, setValidDescription] = useState(true);\n  const [approval, setApproval] = useState(true);\n  const tokenAddress = getCakeAddress();\n  const baseInfo = useGetBaseInfo();\n  const minimumTokenAmount = baseInfo && baseInfo.minimumTokenAmount;\n  const formatedMinimumTokenAmount = getBalanceNumber(new BigNumber(minimumTokenAmount));\n  const tokenContract = useERC20(tokenAddress);\n  const billboardContract = useBillboardContract();\n  const billboardAddress = getBillboardAddress();\n  const {\n    onApprove\n  } = useBillboardApprove(tokenContract, billboardAddress);\n  const allowance = new BigNumber(useBillboardAllowance(tokenContract, billboardAddress) || 0);\n  const needsApproval = allowance.toNumber() <= 0;\n  const tokenBalance = useTokenBalance(tokenAddress);\n  const formatedTokenBalance = getBalanceNumber(tokenBalance);\n  const isQualified = formatedTokenBalance >= formatedMinimumTokenAmount;\n  const [onPresentConfirmationModal] = useModal( /*#__PURE__*/_jsxDEV(ConfirmationPendingContent, {\n    onDismiss: () => {\n      return null;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 51\n  }, this));\n  const [onPresentBillboardBidModal] = useModal( /*#__PURE__*/_jsxDEV(BillboardBidModal, {\n    onDismiss: () => {\n      return null;\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 51\n  }, this));\n  const handleApprove = useCallback(async () => {\n    try {\n      setApproval(true);\n      const txHash = await onApprove(); // user rejected tx or didn't go thru\n\n      if (!txHash) {\n        setApproval(false);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, setApproval]);\n\n  const validateAllFields = (field, fieldValue) => {\n    if (field === 'description') {\n      setDescription(fieldValue);\n\n      if (validator.isLength(fieldValue, {\n        min: 1,\n        max: 100\n      })) {\n        setValidDescription(true);\n      } else {\n        setValidDescription(false);\n      }\n    }\n  };\n\n  const handleIsValid = (e, field) => {\n    validateAllFields(field, e.currentTarget.value);\n  };\n\n  const captureFile = event => {\n    event.preventDefault();\n    const image = event.target.files[0];\n    const maxAllowedSize = 5 * 1024 * 1024;\n\n    if (image.size > maxAllowedSize) {\n      setValidImage(false);\n    } else {\n      setValidImage(true);\n    }\n\n    const urlReader = new window.FileReader();\n    const bufferReader = new window.FileReader();\n    urlReader.readAsDataURL(image);\n    bufferReader.readAsArrayBuffer(image);\n\n    urlReader.onload = arg => {\n      setFile(arg.target.result);\n    };\n\n    bufferReader.onloadend = () => {\n      const arrayBuffer = new Uint8Array(bufferReader.result);\n      setBuffer(Buffer.from(arrayBuffer));\n    };\n  };\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    const response = await ipfs.add(buffer);\n    const {\n      hash\n    } = response[0];\n    onPresentConfirmationModal();\n    const result = await billboardContract.methods.bid(id, city, hash, description).send({\n      from: account\n    });\n\n    if (result) {\n      const action = {\n        type: GET_BID_BILLBOARD_HASH,\n        bidHash: result.transactionHash\n      };\n      store.dispatch(action);\n      onPresentBillboardBidModal();\n    }\n\n    bidStore.dispatch({\n      type: HIDE_FORM\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormLayout, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      color: \"secondary\",\n      size: \"lg\",\n      children: \"Bill Board Bid Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: [\"City: \", info.city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          mb: \"5px\",\n          children: \"* Descriptions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n          placeholder: \"Descriptions...\",\n          name: \"description\",\n          value: description,\n          onChange: e => handleIsValid(e, \"description\"),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '10px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          mb: \"5px\",\n          children: \"* Upload Images:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"file\",\n          name: \"img\",\n          accept: \"image/*\",\n          onChange: captureFile,\n          required: true,\n          style: {\n            padding: \"8px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 21\n        }, this), file && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: file,\n          alt: \"board\",\n          width: \"200px\",\n          style: {\n            marginTop: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 30\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 105\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), account && !isQualified && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"10px\",\n        children: [\"* Minimum Required Token Amount is: \", formatedMinimumTokenAmount, \" LEEK\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 45\n      }, this), account && !validImage && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"10px\",\n        children: \"* Maximum Image Size is: 5MB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 44\n      }, this), account && !validDescription && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        mb: \"10px\",\n        children: \"* Character size is 1-100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 50\n      }, this), account ? /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleApprove,\n          disabled: !isQualified || !needsApproval || !approval || !validImage || !validDescription,\n          children: \"Approve\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disabled: !isQualified || needsApproval || !validImage || !validDescription,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 28\n      }, this) : /*#__PURE__*/_jsxDEV(UnlockButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 9\n  }, this);\n};\n\n_s(BillboardForm, \"ktY0Q8jH1A2Ubz0HEKoxytIJR2Q=\", false, function () {\n  return [useWallet, useGetBaseInfo, useERC20, useBillboardContract, useBillboardApprove, useBillboardAllowance, useTokenBalance, useModal, useModal];\n});\n\n_c3 = BillboardForm;\nexport default _c4 = /*#__PURE__*/React.memo(BillboardForm);\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"FormLayout\");\n$RefreshReg$(_c2, \"Textarea\");\n$RefreshReg$(_c3, \"BillboardForm\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Billboard/Map/BillboardForm.tsx"],"names":["React","useState","useCallback","ipfsClient","styled","getBalanceNumber","Text","Button","Input","Heading","Flex","useModal","useWallet","UnlockButton","useBillboardApprove","getCakeAddress","getBillboardAddress","useERC20","useBillboardContract","useBillboardAllowance","useTokenBalance","BigNumber","validator","ConfirmationPendingContent","BillboardBidModal","GET_BID_BILLBOARD_HASH","HIDE_FORM","store","bidStore","useGetBaseInfo","ipfs","host","port","protocol","FormLayout","div","Textarea","textarea","BillboardForm","props","info","id","city","account","description","setDescription","buffer","setBuffer","file","setFile","validImage","setValidImage","validDescription","setValidDescription","approval","setApproval","tokenAddress","baseInfo","minimumTokenAmount","formatedMinimumTokenAmount","tokenContract","billboardContract","billboardAddress","onApprove","allowance","needsApproval","toNumber","tokenBalance","formatedTokenBalance","isQualified","onPresentConfirmationModal","onPresentBillboardBidModal","handleApprove","txHash","e","console","error","validateAllFields","field","fieldValue","isLength","min","max","handleIsValid","currentTarget","value","captureFile","event","preventDefault","image","target","files","maxAllowedSize","size","urlReader","window","FileReader","bufferReader","readAsDataURL","readAsArrayBuffer","onload","arg","result","onloadend","arrayBuffer","Uint8Array","Buffer","from","onSubmit","response","add","hash","methods","bid","send","action","type","bidHash","transactionHash","dispatch","marginBottom","padding","marginTop","memo"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,EAA8BC,OAA9B,EAAuCC,IAAvC,EAA6CC,QAA7C,QAA6D,YAA7D;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SAASC,cAAT,EAAyBC,mBAAzB,QAAoD,sBAApD;AACA,SAASC,QAAT,EAAmBC,oBAAnB,QAA+C,mBAA/C;AACA,SAASC,qBAAT,QAAsC,oBAAtC;AACA,OAAOC,eAAP,MAA4B,uBAA5B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,0BAAP,MAAuC,sCAAvC;AACA,OAAOC,iBAAP,MAA8B,4BAA9B;AACA,SAASC,sBAAT,EAAiCC,SAAjC,QAAkD,kBAAlD;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,gBAAhC;AACA,SAASC,cAAT,QAA+B,QAA/B;AAEA,MAAMC,IAAI,GAAG3B,UAAU,CAAC;AAAE4B,EAAAA,IAAI,EAAE,gBAAR;AAA0BC,EAAAA,IAAI,EAAE,IAAhC;AAAsCC,EAAAA,QAAQ,EAAE;AAAhD,CAAD,CAAvB;AAEA,MAAMC,UAAU,GAAG9B,MAAM,CAAC+B,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA,CANA;KAAMD,U;AAQN,MAAME,QAAQ,GAAGhC,MAAM,CAACiC,QAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;MAAMD,Q;;AAcN,MAAME,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAM;AAAEE,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAeF,IAArB;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAc/B,SAAS,EAA7B;AACA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgC5C,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAAC6C,MAAD,EAASC,SAAT,IAAsB9C,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAC+C,IAAD,EAAOC,OAAP,IAAkBhD,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACiD,UAAD,EAAaC,aAAb,IAA8BlD,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACmD,gBAAD,EAAmBC,mBAAnB,IAA0CpD,QAAQ,CAAC,IAAD,CAAxD;AACA,QAAM,CAACqD,QAAD,EAAWC,WAAX,IAA0BtD,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAMuD,YAAY,GAAGzC,cAAc,EAAnC;AACA,QAAM0C,QAAQ,GAAG5B,cAAc,EAA/B;AACA,QAAM6B,kBAAkB,GAAGD,QAAQ,IAAIA,QAAQ,CAACC,kBAAhD;AACA,QAAMC,0BAA0B,GAAGtD,gBAAgB,CAAC,IAAIgB,SAAJ,CAAcqC,kBAAd,CAAD,CAAnD;AACA,QAAME,aAAa,GAAG3C,QAAQ,CAACuC,YAAD,CAA9B;AACA,QAAMK,iBAAiB,GAAG3C,oBAAoB,EAA9C;AACA,QAAM4C,gBAAgB,GAAG9C,mBAAmB,EAA5C;AACA,QAAM;AAAE+C,IAAAA;AAAF,MAAgBjD,mBAAmB,CAAC8C,aAAD,EAAgBE,gBAAhB,CAAzC;AACA,QAAME,SAAS,GAAG,IAAI3C,SAAJ,CAAcF,qBAAqB,CAACyC,aAAD,EAAgBE,gBAAhB,CAArB,IAA0D,CAAxE,CAAlB;AACA,QAAMG,aAAa,GAAGD,SAAS,CAACE,QAAV,MAAwB,CAA9C;AACA,QAAMC,YAAY,GAAG/C,eAAe,CAACoC,YAAD,CAApC;AACA,QAAMY,oBAAoB,GAAG/D,gBAAgB,CAAC8D,YAAD,CAA7C;AACA,QAAME,WAAW,GAAGD,oBAAoB,IAAIT,0BAA5C;AACA,QAAM,CAACW,0BAAD,IAA+B3D,QAAQ,eAAC,QAAC,0BAAD;AAA4B,IAAA,SAAS,EAAE,MAAM;AAAE,aAAO,IAAP;AAAa;AAA5D;AAAA;AAAA;AAAA;AAAA,UAAD,CAA7C;AACA,QAAM,CAAC4D,0BAAD,IAA+B5D,QAAQ,eAAC,QAAC,iBAAD;AAAmB,IAAA,SAAS,EAAE,MAAM;AAAE,aAAO,IAAP;AAAa;AAAnD;AAAA;AAAA;AAAA;AAAA,UAAD,CAA7C;AAEA,QAAM6D,aAAa,GAAGtE,WAAW,CAAC,YAAY;AAC1C,QAAI;AACAqD,MAAAA,WAAW,CAAC,IAAD,CAAX;AACA,YAAMkB,MAAM,GAAG,MAAMV,SAAS,EAA9B,CAFA,CAGA;;AACA,UAAI,CAACU,MAAL,EAAa;AACTlB,QAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,KAPD,CAOE,OAAOmB,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACH;AACJ,GAXgC,EAW9B,CAACX,SAAD,EAAYR,WAAZ,CAX8B,CAAjC;;AAaA,QAAMsB,iBAAiB,GAAG,CAACC,KAAD,EAAgBC,UAAhB,KAAuC;AAC7D,QAAID,KAAK,KAAK,aAAd,EAA6B;AACzBjC,MAAAA,cAAc,CAACkC,UAAD,CAAd;;AACA,UAAIzD,SAAS,CAAC0D,QAAV,CAAmBD,UAAnB,EAA+B;AAAEE,QAAAA,GAAG,EAAE,CAAP;AAAUC,QAAAA,GAAG,EAAE;AAAf,OAA/B,CAAJ,EAA0D;AACtD7B,QAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACH,OAFD,MAEO;AACHA,QAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACH;AACJ;AACJ,GATD;;AAWA,QAAM8B,aAAa,GAAG,CAACT,CAAD,EAAII,KAAJ,KAAsB;AACxCD,IAAAA,iBAAiB,CAACC,KAAD,EAAQJ,CAAC,CAACU,aAAF,CAAgBC,KAAxB,CAAjB;AACH,GAFD;;AAIA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAd;AACA,UAAMC,cAAc,GAAG,IAAI,IAAJ,GAAW,IAAlC;;AACA,QAAIH,KAAK,CAACI,IAAN,GAAaD,cAAjB,EAAiC;AAC7BzC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KAFD,MAEO;AACHA,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;;AAED,UAAM2C,SAAS,GAAG,IAAIC,MAAM,CAACC,UAAX,EAAlB;AACA,UAAMC,YAAY,GAAG,IAAIF,MAAM,CAACC,UAAX,EAArB;AACAF,IAAAA,SAAS,CAACI,aAAV,CAAwBT,KAAxB;AACAQ,IAAAA,YAAY,CAACE,iBAAb,CAA+BV,KAA/B;;AAEAK,IAAAA,SAAS,CAACM,MAAV,GAAoBC,GAAD,IAAS;AACxBpD,MAAAA,OAAO,CAACoD,GAAG,CAACX,MAAJ,CAAWY,MAAZ,CAAP;AACH,KAFD;;AAIAL,IAAAA,YAAY,CAACM,SAAb,GAAyB,MAAM;AAC3B,YAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAeR,YAAY,CAACK,MAA5B,CAApB;AACAvD,MAAAA,SAAS,CAAC2D,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAD,CAAT;AACH,KAHD;AAIH,GAvBD;;AAyBA,QAAMI,QAAQ,GAAG,MAAOrB,KAAP,IAAiB;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAMqB,QAAQ,GAAG,MAAM/E,IAAI,CAACgF,GAAL,CAAShE,MAAT,CAAvB;AACA,UAAM;AAAEiE,MAAAA;AAAF,QAAWF,QAAQ,CAAC,CAAD,CAAzB;AACAvC,IAAAA,0BAA0B;AAC1B,UAAMgC,MAAM,GAAG,MAAMzC,iBAAiB,CAACmD,OAAlB,CAA0BC,GAA1B,CAA8BxE,EAA9B,EAAkCC,IAAlC,EAAwCqE,IAAxC,EAA8CnE,WAA9C,EAA2DsE,IAA3D,CAAgE;AAAEP,MAAAA,IAAI,EAAEhE;AAAR,KAAhE,CAArB;;AACA,QAAI2D,MAAJ,EAAY;AACR,YAAMa,MAAM,GAAG;AACXC,QAAAA,IAAI,EAAE3F,sBADK;AAEX4F,QAAAA,OAAO,EAAEf,MAAM,CAACgB;AAFL,OAAf;AAIA3F,MAAAA,KAAK,CAAC4F,QAAN,CAAeJ,MAAf;AACA5C,MAAAA,0BAA0B;AAC7B;;AACD3C,IAAAA,QAAQ,CAAC2F,QAAT,CAAkB;AAAEH,MAAAA,IAAI,EAAE1F;AAAR,KAAlB;AACH,GAfD;;AAiBA,sBACI,QAAC,UAAD;AAAA,4BACI,QAAC,OAAD;AAAS,MAAA,KAAK,EAAC,WAAf;AAA2B,MAAA,IAAI,EAAC,IAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AAAA,2BAAac,IAAI,CAACE,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAM,MAAA,QAAQ,EAAEkE,QAAhB;AAAA,8BACI;AAAK,QAAA,KAAK,EAAE;AAAEY,UAAAA,YAAY,EAAE;AAAhB,SAAZ;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,QAAD;AACI,UAAA,WAAW,EAAC,iBADhB;AAEI,UAAA,IAAI,EAAC,aAFT;AAGI,UAAA,KAAK,EAAE5E,WAHX;AAII,UAAA,QAAQ,EAAG8B,CAAD,IAAOS,aAAa,CAACT,CAAD,EAAI,aAAJ,CAJlC;AAKI,UAAA,QAAQ;AALZ;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAYI;AAAK,QAAA,KAAK,EAAE;AAAE8C,UAAAA,YAAY,EAAE;AAAhB,SAAZ;AAAA,gCACI,QAAC,IAAD;AAAM,UAAA,EAAE,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,KAAD;AACI,UAAA,IAAI,EAAC,MADT;AAEI,UAAA,IAAI,EAAC,KAFT;AAGI,UAAA,MAAM,EAAC,SAHX;AAII,UAAA,QAAQ,EAAElC,WAJd;AAKI,UAAA,QAAQ,MALZ;AAMI,UAAA,KAAK,EAAE;AAAEmC,YAAAA,OAAO,EAAE;AAAX;AANX;AAAA;AAAA;AAAA;AAAA,gBAFJ,EAWKzE,IAAI,iBAAI;AAAK,UAAA,GAAG,EAAEA,IAAV;AAAgB,UAAA,GAAG,EAAC,OAApB;AAA4B,UAAA,KAAK,EAAC,OAAlC;AAA0C,UAAA,KAAK,EAAE;AAAE0E,YAAAA,SAAS,EAAE;AAAb;AAAjD;AAAA;AAAA;AAAA;AAAA,gBAXb,eAWwF;AAAA;AAAA;AAAA;AAAA,gBAXxF;AAAA;AAAA;AAAA;AAAA;AAAA,cAZJ,EA0BK/E,OAAO,IAAI,CAAC0B,WAAZ,iBAA2B,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,SAAZ;AAAsB,QAAA,EAAE,EAAC,MAAzB;AAAA,2DAAqEV,0BAArE;AAAA;AAAA;AAAA;AAAA;AAAA,cA1BhC,EA4BKhB,OAAO,IAAI,CAACO,UAAZ,iBAA0B,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,SAAZ;AAAsB,QAAA,EAAE,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA5B/B,EA8BKP,OAAO,IAAI,CAACS,gBAAZ,iBAAgC,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,SAAZ;AAAsB,QAAA,EAAE,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cA9BrC,EAgCKT,OAAO,gBAAG,QAAC,IAAD;AAAM,QAAA,UAAU,EAAC,QAAjB;AAA0B,QAAA,cAAc,EAAC,eAAzC;AAAA,gCACP,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE6B,aAAjB;AAAgC,UAAA,QAAQ,EAAE,CAACH,WAAD,IAAgB,CAACJ,aAAjB,IAAkC,CAACX,QAAnC,IAA+C,CAACJ,UAAhD,IAA8D,CAACE,gBAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADO,eAEP,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,QAAQ,EAAE,CAACiB,WAAD,IAAgBJ,aAAhB,IAAiC,CAACf,UAAlC,IAAgD,CAACE,gBAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFO;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,gBAGE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cAnCd;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8CH,CA9ID;;GAAMd,a;UAGkB1B,S,EAQHiB,c,EAGKZ,Q,EACIC,oB,EAEJJ,mB,EACUK,qB,EAEXC,e,EAGgBT,Q,EACAA,Q;;;MAxBnC2B,a;AAgJN,kCAAetC,KAAK,CAAC2H,IAAN,CAAWrF,aAAX,CAAf","sourcesContent":["import React, { useState, useCallback } from 'react';\nimport ipfsClient from 'ipfs-http-client'\nimport styled from 'styled-components';\nimport { getBalanceNumber } from \"utils/formatBalance\"\nimport { Text, Button, Input, Heading, Flex, useModal } from \"leek-uikit\"\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport UnlockButton from 'components/UnlockButton';\nimport { useBillboardApprove } from 'hooks/useApprove';\nimport { getCakeAddress, getBillboardAddress } from 'utils/addressHelpers';\nimport { useERC20, useBillboardContract } from 'hooks/useContract';\nimport { useBillboardAllowance } from 'hooks/useAllowance';\nimport useTokenBalance from 'hooks/useTokenBalance';\nimport BigNumber from 'bignumber.js';\nimport validator from \"validator\"\nimport ConfirmationPendingContent from '../Modal/ConfirmationPendeingContent';\nimport BillboardBidModal from '../Modal/BillboardBidModal';\nimport { GET_BID_BILLBOARD_HASH, HIDE_FORM } from '../store/reducer';\nimport { store, bidStore } from \"../store/store\"\nimport { useGetBaseInfo } from '../api';\n\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nconst FormLayout = styled.div`\n    padding:30px;\n\n    @media (max-width: 768px) {\n        padding:20px\n    }\n`\n\nconst Textarea = styled.textarea`\n    background-color: #eeeaf4;\n    border: 0;\n    border-radius: 16px;\n    box-shadow: inset 0px 2px 2px -1px rgb(74 74 104 / 10%);\n    color: #452A7A;\n    display: block;\n    font-size: 16px;\n    height: 100px;\n    outline: 0;\n    width: 100%;\n    padding:15px;\n`\n\nconst BillboardForm = (props) => {\n    const { info } = props;\n    const { id, city } = info;\n    const { account } = useWallet()\n    const [description, setDescription] = useState(\"\")\n    const [buffer, setBuffer] = useState(null);\n    const [file, setFile] = useState(null);\n    const [validImage, setValidImage] = useState(true)\n    const [validDescription, setValidDescription] = useState(true)\n    const [approval, setApproval] = useState(true)\n    const tokenAddress = getCakeAddress()\n    const baseInfo = useGetBaseInfo()\n    const minimumTokenAmount = baseInfo && baseInfo.minimumTokenAmount\n    const formatedMinimumTokenAmount = getBalanceNumber(new BigNumber(minimumTokenAmount))\n    const tokenContract = useERC20(tokenAddress);\n    const billboardContract = useBillboardContract()\n    const billboardAddress = getBillboardAddress()\n    const { onApprove } = useBillboardApprove(tokenContract, billboardAddress)\n    const allowance = new BigNumber(useBillboardAllowance(tokenContract, billboardAddress) || 0)\n    const needsApproval = allowance.toNumber() <= 0\n    const tokenBalance = useTokenBalance(tokenAddress)\n    const formatedTokenBalance = getBalanceNumber(tokenBalance)\n    const isQualified = formatedTokenBalance >= formatedMinimumTokenAmount\n    const [onPresentConfirmationModal] = useModal(<ConfirmationPendingContent onDismiss={() => { return null }} />)\n    const [onPresentBillboardBidModal] = useModal(<BillboardBidModal onDismiss={() => { return null }} />)\n\n    const handleApprove = useCallback(async () => {\n        try {\n            setApproval(true)\n            const txHash = await onApprove()\n            // user rejected tx or didn't go thru\n            if (!txHash) {\n                setApproval(false)\n            }\n        } catch (e) {\n            console.error(e)\n        }\n    }, [onApprove, setApproval])\n\n    const validateAllFields = (field: string, fieldValue: string) => {\n        if (field === 'description') {\n            setDescription(fieldValue)\n            if (validator.isLength(fieldValue, { min: 1, max: 100 })) {\n                setValidDescription(true)\n            } else {\n                setValidDescription(false)\n            }\n        }\n    }\n\n    const handleIsValid = (e, field: string) => {\n        validateAllFields(field, e.currentTarget.value);\n    }\n\n    const captureFile = (event) => {\n        event.preventDefault()\n        const image = event.target.files[0]\n        const maxAllowedSize = 5 * 1024 * 1024;\n        if (image.size > maxAllowedSize) {\n            setValidImage(false)\n        } else {\n            setValidImage(true)\n        }\n\n        const urlReader = new window.FileReader()\n        const bufferReader = new window.FileReader()\n        urlReader.readAsDataURL(image)\n        bufferReader.readAsArrayBuffer(image)\n\n        urlReader.onload = (arg) => {\n            setFile(arg.target.result)\n        }\n\n        bufferReader.onloadend = () => {\n            const arrayBuffer = new Uint8Array(bufferReader.result as ArrayBuffer)\n            setBuffer(Buffer.from(arrayBuffer));\n        }\n    }\n\n    const onSubmit = async (event) => {\n        event.preventDefault()\n        const response = await ipfs.add(buffer);\n        const { hash } = response[0];\n        onPresentConfirmationModal();\n        const result = await billboardContract.methods.bid(id, city, hash, description).send({ from: account })\n        if (result) {\n            const action = {\n                type: GET_BID_BILLBOARD_HASH,\n                bidHash: result.transactionHash,\n            }\n            store.dispatch(action)\n            onPresentBillboardBidModal()\n        }\n        bidStore.dispatch({ type: HIDE_FORM })\n    }\n\n    return (\n        <FormLayout>\n            <Heading color=\"secondary\" size=\"lg\">Bill Board Bid Form</Heading>\n            <Text>City: {info.city}</Text>\n            <form onSubmit={onSubmit}>\n                <div style={{ marginBottom: '10px' }}>\n                    <Text mb=\"5px\">* Descriptions:</Text>\n                    <Textarea\n                        placeholder=\"Descriptions...\"\n                        name=\"description\"\n                        value={description}\n                        onChange={(e) => handleIsValid(e, \"description\")}\n                        required\n                    />\n                </div>\n\n                <div style={{ marginBottom: '10px' }}>\n                    <Text mb=\"5px\">* Upload Images:</Text>\n                    <Input\n                        type=\"file\"\n                        name=\"img\"\n                        accept=\"image/*\"\n                        onChange={captureFile}\n                        required\n                        style={{ padding: \"8px\" }}\n                    />\n\n                    {file && <img src={file} alt=\"board\" width=\"200px\" style={{ marginTop: \"10px\" }} />}<br />\n                </div>\n\n                {account && !isQualified && <Text color=\"failure\" mb=\"10px\">* Minimum Required Token Amount is: {formatedMinimumTokenAmount} LEEK</Text>}\n\n                {account && !validImage && <Text color=\"failure\" mb=\"10px\">* Maximum Image Size is: 5MB</Text>}\n\n                {account && !validDescription && <Text color=\"failure\" mb=\"10px\">* Character size is 1-100</Text>}\n\n                {account ? <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                    <Button onClick={handleApprove} disabled={!isQualified || !needsApproval || !approval || !validImage || !validDescription}>Approve</Button>\n                    <Button type=\"submit\" disabled={!isQualified || needsApproval || !validImage || !validDescription}>Submit</Button>\n                </Flex> : <UnlockButton />}\n\n\n            </form>\n        </FormLayout>\n\n    )\n}\n\nexport default React.memo(BillboardForm);"]},"metadata":{},"sourceType":"module"}