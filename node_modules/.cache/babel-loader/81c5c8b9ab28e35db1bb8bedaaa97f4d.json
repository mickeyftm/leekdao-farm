{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport useRefresh from 'hooks/useRefresh';\nimport { useLottery } from 'hooks/useContract';\nimport { loadingStore } from '../store/store';\nimport { SET_LOADING_STATE_FALSE, SET_LOADING_STATE_TRUE } from '../store/reducer';\nconst url = process.env.REACT_APP_API_URL;\nconst username = process.env.REACT_APP_API_USERNAME;\nconst password = process.env.REACT_APP_API_PASSWORD;\nexport const useGetScore = address => {\n  _s();\n\n  const [deGenScore, setDeGenScore] = useState(null);\n  const customUrl = `${url}/luckyDraw`;\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await axios.get(customUrl, {\n          params: {\n            address\n          }\n        });\n\n        if (mounted) {\n          setDeGenScore(data);\n        }\n      } catch (error) {\n        console.error('Unable to fetch DeGen Score data:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [customUrl, address, setDeGenScore]);\n  return deGenScore;\n};\n\n_s(useGetScore, \"Fhws41V291m4Z8/jCVVdCTt6/0w=\");\n\nexport const usePostParticipation = address => {\n  _s2();\n\n  const [successData, setSuccessData] = useState(null);\n  const customUrl = `${url}/luckyDraw`;\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await axios.post(customUrl, {\n          address\n        }, {\n          auth: {\n            username,\n            password\n          }\n        });\n\n        if (mounted) {\n          setSuccessData(data);\n        }\n      } catch (error) {\n        console.error('Unable to fetch participation data:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [customUrl, address, setSuccessData]);\n  return successData;\n};\n\n_s2(usePostParticipation, \"f6Ba9vrUj1aZ7z7GhGCsfxCB52A=\");\n\nexport const useGetParticipationList = () => {\n  _s3();\n\n  const [participationList, setParticipationList] = useState([]);\n  const customUrl = `${url}/participationList`;\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await axios.get(customUrl);\n\n        if (mounted) {\n          setParticipationList(data);\n        }\n      } catch (error) {\n        console.error('Unable to fetch participation list data:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [customUrl, setParticipationList, fastRefresh]);\n  return participationList;\n};\n\n_s3(useGetParticipationList, \"N7TKfV/hEHVha7yfqSJ4bYIKP1A=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useGetNotParticipatedList = () => {\n  _s4();\n\n  const [participationList, setParticipationList] = useState(null);\n  const customUrl = `${url}/notParticipatedList`;\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const {\n          data\n        } = await axios.get(customUrl);\n\n        if (mounted) {\n          setParticipationList(data);\n        }\n      } catch (error) {\n        console.error('Unable to fetch not particpated persons list:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [customUrl, fastRefresh, setParticipationList]);\n  return participationList;\n};\n\n_s4(useGetNotParticipatedList, \"jgUaI006hCOmzgIZ/g93iMLSubg=\", false, function () {\n  return [useRefresh];\n});\n\nexport const updateParticipationStatus = async () => {\n  const customUrl = `${url}/participationStatus`;\n  await axios.patch(customUrl, {}, {\n    auth: {\n      username,\n      password\n    }\n  });\n};\nexport const useGetWinners = () => {\n  _s5();\n\n  const contract = useLottery();\n  const [winners, setWinners] = useState([]);\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const currentRound = await contract.methods.currentRound().call();\n        const roundWinners = await contract.methods.getWinners(currentRound - 1).call();\n\n        if (mounted) {\n          setWinners(roundWinners);\n        }\n      } catch (error) {\n        console.error('Unable to fetch winners:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [contract.methods, fastRefresh]);\n  return winners;\n};\n\n_s5(useGetWinners, \"w0bDJJr8h7gb2bp4hPoAcKpRgLo=\", false, function () {\n  return [useLottery, useRefresh];\n});\n\nexport const useGetCurrentRound = () => {\n  _s6();\n\n  const contract = useLottery();\n  const [round, setRound] = useState(1);\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const currentRound = await contract.methods.currentRound().call();\n\n        if (mounted) {\n          setRound(currentRound);\n        }\n      } catch (error) {\n        console.error('Unable to fetch current round:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [contract.methods, fastRefresh]);\n  return round;\n};\n\n_s6(useGetCurrentRound, \"e2jB0qhqkfMle8prOp4BWy/oHBo=\", false, function () {\n  return [useLottery, useRefresh];\n});\n\nexport const useFetchWinnersAndRound = round => {\n  _s7();\n\n  const contract = useLottery();\n  const [winnersList, setWinnersList] = useState([]);\n  useEffect(() => {\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        loadingStore.dispatch({\n          type: SET_LOADING_STATE_TRUE\n        });\n        const winners = [];\n        const promises = [];\n\n        if (round === 1) {\n          if (mounted) {\n            setWinnersList(winners);\n          }\n        } else {\n          for (let i = 2; i <= round; i++) {\n            promises.push(contract.methods.getWinners(i - 1).call());\n          }\n\n          const winnersArray = await Promise.all(promises);\n          winnersArray.forEach((itemArray, index) => {\n            itemArray.forEach(item => {\n              winners.push({\n                \"address\": item,\n                \"round\": index + 1\n              });\n            });\n          });\n\n          if (mounted) {\n            setWinnersList(winners);\n          }\n\n          loadingStore.dispatch({\n            type: SET_LOADING_STATE_FALSE\n          });\n        }\n      } catch (error) {\n        console.error('Unable to fetch history winners:', error.response);\n      }\n    };\n\n    fetchData();\n    return () => {\n      mounted = false;\n    };\n  }, [contract.methods, round]);\n  return winnersList;\n};\n\n_s7(useFetchWinnersAndRound, \"XoAJN83i9fCpxSheXqmQ4ZUVkFU=\", false, function () {\n  return [useLottery];\n});","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Lottery/api/index.ts"],"names":["useEffect","useState","axios","useRefresh","useLottery","loadingStore","SET_LOADING_STATE_FALSE","SET_LOADING_STATE_TRUE","url","process","env","REACT_APP_API_URL","username","REACT_APP_API_USERNAME","password","REACT_APP_API_PASSWORD","useGetScore","address","deGenScore","setDeGenScore","customUrl","mounted","fetchData","data","get","params","error","console","response","usePostParticipation","successData","setSuccessData","post","auth","useGetParticipationList","participationList","setParticipationList","fastRefresh","useGetNotParticipatedList","updateParticipationStatus","patch","useGetWinners","contract","winners","setWinners","currentRound","methods","call","roundWinners","getWinners","useGetCurrentRound","round","setRound","useFetchWinnersAndRound","winnersList","setWinnersList","dispatch","type","promises","i","push","winnersArray","Promise","all","forEach","itemArray","index","item"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\"\nimport axios from \"axios\"\nimport useRefresh from 'hooks/useRefresh'\nimport { useLottery } from 'hooks/useContract'\nimport { loadingStore } from '../store/store'\nimport { SET_LOADING_STATE_FALSE, SET_LOADING_STATE_TRUE } from '../store/reducer'\n\nconst url = process.env.REACT_APP_API_URL;\nconst username = process.env.REACT_APP_API_USERNAME\nconst password = process.env.REACT_APP_API_PASSWORD\n\nexport interface ApiStatResponse {\n    score?: string\n    level?: string\n    error?: string\n}\n\nexport const useGetScore = (address) => {\n    const [deGenScore, setDeGenScore] = useState<ApiStatResponse | null>(null)\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl, {\n                    params: {\n                        address\n                    }\n                })\n\n                if (mounted) {\n                    setDeGenScore(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch DeGen Score data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, address, setDeGenScore])\n\n    return deGenScore\n}\n\nexport const usePostParticipation = (address) => {\n    const [successData, setSuccessData] = useState(null);\n    const customUrl = `${url}/luckyDraw`;\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.post(customUrl, {\n                    address,\n                },\n                    {\n                        auth: {\n                            username,\n                            password\n                        }\n                    }\n                )\n\n                if (mounted) {\n                    setSuccessData(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch participation data:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, address, setSuccessData])\n\n    return successData\n}\n\nexport const useGetParticipationList = () => {\n    const [participationList, setParticipationList] = useState([])\n    const customUrl = `${url}/participationList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl)\n                if (mounted) {\n                    setParticipationList(data)\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch participation list data:', error.response)\n            }\n\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, setParticipationList, fastRefresh])\n    return participationList\n}\n\nexport const useGetNotParticipatedList = () => {\n    const [participationList, setParticipationList] = useState(null)\n    const customUrl = `${url}/notParticipatedList`;\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const { data } = await axios.get(customUrl)\n\n                if (mounted) {\n                    setParticipationList(data)\n                }\n            } catch (error) {\n                console.error('Unable to fetch not particpated persons list:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [customUrl, fastRefresh, setParticipationList])\n\n    return participationList\n}\n\nexport const updateParticipationStatus = async () => {\n    const customUrl = `${url}/participationStatus`;\n    await axios.patch(customUrl, {}, {\n        auth: {\n            username,\n            password\n        }\n    })\n}\n\nexport const useGetWinners = () => {\n    const contract = useLottery();\n    const [winners, setWinners] = useState([]);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n                const roundWinners = await contract.methods.getWinners(currentRound - 1).call()\n\n                if (mounted) {\n                    setWinners(roundWinners)\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch winners:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return winners\n}\n\n\nexport const useGetCurrentRound = () => {\n    const contract = useLottery();\n    const [round, setRound] = useState(1);\n    const { fastRefresh } = useRefresh()\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                const currentRound = await contract.methods.currentRound().call()\n\n                if (mounted) {\n                    setRound(currentRound);\n                }\n\n            } catch (error) {\n                console.error('Unable to fetch current round:', error.response)\n            }\n\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, fastRefresh])\n    return round\n}\n\nexport const useFetchWinnersAndRound = (round) => {\n    const contract = useLottery();\n    const [winnersList, setWinnersList] = useState([]);\n\n    useEffect(() => {\n        let mounted = true;\n        const fetchData = async () => {\n            try {\n                loadingStore.dispatch({ type: SET_LOADING_STATE_TRUE })\n                const winners = []\n                const promises = [];\n\n                if (round === 1) {\n                    if (mounted) {\n                        setWinnersList(winners)\n                    }\n                } else {\n                    for (let i = 2; i <= round; i++) {\n                        promises.push(contract.methods.getWinners(i - 1).call())\n                    }\n                    const winnersArray = await Promise.all(promises)\n                    winnersArray.forEach((itemArray, index) => {\n                        itemArray.forEach(item => {\n                            winners.push({\n                                \"address\": item,\n                                \"round\": index + 1\n                            })\n                        })\n                    })\n\n                    if (mounted) {\n                        setWinnersList(winners)\n                    }\n                    loadingStore.dispatch({ type: SET_LOADING_STATE_FALSE })\n                }\n            } catch (error) {\n                console.error('Unable to fetch history winners:', error.response)\n            }\n        }\n        fetchData()\n        return () => {\n            mounted = false\n        }\n    }, [contract.methods, round])\n    return winnersList\n}\n"]},"metadata":{},"sourceType":"module"}