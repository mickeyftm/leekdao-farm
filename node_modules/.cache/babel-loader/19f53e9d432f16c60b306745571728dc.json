{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Voting/components/TimeFrame.tsx\";\nimport React from 'react';\nimport { Text } from 'leek-uikit';\nimport moment from 'moment';\nimport { ProposalState } from 'state/types';\n\nconst TimeFrame = ({\n  startDate,\n  endDate,\n  proposalState\n}) => {\n  const textProps = {\n    fontSize: '16px',\n    color: 'textSubtle',\n    ml: '8px'\n  };\n\n  if (proposalState === ProposalState.CLOSED) {\n    return /*#__PURE__*/_jsxDEV(Text, { ...textProps,\n      children: [\"Ended\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", moment.utc(Number(endDate) * 1000).format('MMMM Do YYYY, HH:mm'), \" UTC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 16\n    }, this);\n  }\n\n  if (proposalState === ProposalState.PENDING) {\n    return /*#__PURE__*/_jsxDEV(Text, { ...textProps,\n      children: [\"Starts\", /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\" \", moment.utc(Number(startDate) * 1000).format('MMMM Do YYYY, HH:mm'), \" UTC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Text, { ...textProps,\n    children: [\"Ends\", /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\" \", moment.utc(Number(endDate) * 1000).format('MMMM Do YYYY, HH:mm'), \" UTC\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 12\n  }, this);\n};\n\n_c = TimeFrame;\nexport default TimeFrame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeFrame\");","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Voting/components/TimeFrame.tsx"],"names":["React","Text","moment","ProposalState","TimeFrame","startDate","endDate","proposalState","textProps","fontSize","color","ml","CLOSED","utc","Number","format","PENDING"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,aAAT,QAA8B,aAA9B;;AAQA,MAAMC,SAAmC,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KAA2C;AACnF,QAAMC,SAAS,GAAG;AACdC,IAAAA,QAAQ,EAAE,MADI;AAEdC,IAAAA,KAAK,EAAE,YAFO;AAGdC,IAAAA,EAAE,EAAE;AAHU,GAAlB;;AAMA,MAAIJ,aAAa,KAAKJ,aAAa,CAACS,MAApC,EAA4C;AACxC,wBAAO,QAAC,IAAD,OAAUJ,SAAV;AAAA,uCACH;AAAA,wBAAQN,MAAM,CAACW,GAAP,CAAWC,MAAM,CAACR,OAAD,CAAN,GAAkB,IAA7B,EAAmCS,MAAnC,CAA0C,qBAA1C,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cADG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAGH;;AAED,MAAIR,aAAa,KAAKJ,aAAa,CAACa,OAApC,EAA6C;AACzC,wBAAO,QAAC,IAAD,OAAUR,SAAV;AAAA,wCACH;AAAA,wBAAQN,MAAM,CAACW,GAAP,CAAWC,MAAM,CAACT,SAAD,CAAN,GAAoB,IAA/B,EAAqCU,MAArC,CAA4C,qBAA5C,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA,cADG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAGH;;AAED,sBAAO,QAAC,IAAD,OAAUP,SAAV;AAAA,oCACH;AAAA,sBAAQN,MAAM,CAACW,GAAP,CAAWC,MAAM,CAACR,OAAD,CAAN,GAAkB,IAA7B,EAAmCS,MAAnC,CAA0C,qBAA1C,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA,YADG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAGH,CAtBD;;KAAMX,S;AAwBN,eAAeA,SAAf","sourcesContent":["import React from 'react'\nimport { Text } from 'leek-uikit'\nimport moment from 'moment'\nimport { ProposalState } from 'state/types'\n\ninterface TimeFrameProps {\n    startDate: number\n    endDate: number\n    proposalState: ProposalState\n}\n\nconst TimeFrame: React.FC<TimeFrameProps> = ({ startDate, endDate, proposalState }) => {\n    const textProps = {\n        fontSize: '16px',\n        color: 'textSubtle',\n        ml: '8px',\n    }\n\n    if (proposalState === ProposalState.CLOSED) {\n        return <Text {...textProps}>Ended\n            <span> {moment.utc(Number(endDate) * 1000).format('MMMM Do YYYY, HH:mm')} UTC</span>\n        </Text >\n    }\n\n    if (proposalState === ProposalState.PENDING) {\n        return <Text {...textProps}>Starts\n            <span> {moment.utc(Number(startDate) * 1000).format('MMMM Do YYYY, HH:mm')} UTC</span>\n        </Text >\n    }\n\n    return <Text {...textProps}>Ends\n        <span> {moment.utc(Number(endDate) * 1000).format('MMMM Do YYYY, HH:mm')} UTC</span>\n    </Text >\n}\n\nexport default TimeFrame"]},"metadata":{},"sourceType":"module"}