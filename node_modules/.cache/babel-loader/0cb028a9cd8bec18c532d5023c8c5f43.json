{"ast":null,"code":"import Web3 from 'web3';\nimport getNodeUrl from 'utils/getRpcUrl';\nconst NODE_URL = getNodeUrl();\nlet urlProvider;\n\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, {\n    timeout: 10000\n  });\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL);\n}\n\nconst constUrlProvider = urlProvider;\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\n\nconst getWeb3 = () => {\n  const web3 = new Web3(urlProvider);\n  return web3;\n};\n\nconst getContract = (abi, address, contractOptions) => {\n  const web3 = getWeb3();\n  return new web3.eth.Contract(abi, address, contractOptions);\n};\n\nexport { getWeb3, getContract, constUrlProvider };","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/utils/web3.ts"],"names":["Web3","getNodeUrl","NODE_URL","urlProvider","startsWith","providers","HttpProvider","timeout","WebsocketProvider","constUrlProvider","getWeb3","web3","getContract","abi","address","contractOptions","eth","Contract"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAIA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,MAAMC,QAAQ,GAAGD,UAAU,EAA3B;AAEA,IAAIE,WAAJ;;AACA,IAAID,QAAQ,CAACE,UAAT,CAAoB,UAApB,CAAJ,EAAqC;AACnCD,EAAAA,WAAW,GAAG,IAAIH,IAAI,CAACK,SAAL,CAAeC,YAAnB,CAAgCJ,QAAhC,EAA0C;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAA1C,CAAd;AACD,CAFD,MAEO,IAAIL,QAAQ,CAACE,UAAT,CAAoB,QAApB,CAAJ,EAAmC;AACxCD,EAAAA,WAAW,GAAG,IAAIH,IAAI,CAACK,SAAL,CAAeG,iBAAnB,CAAqCN,QAArC,CAAd;AACD;;AAED,MAAMO,gBAAgB,GAAGN,WAAzB;AAEA;AACA;AACA;;AACA,MAAMO,OAAO,GAAG,MAAM;AACpB,QAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASG,WAAT,CAAb;AACA,SAAOQ,IAAP;AACD,CAHD;;AAIA,MAAMC,WAAW,GAAG,CAACC,GAAD,EAAWC,OAAX,EAA4BC,eAA5B,KAAkE;AACpF,QAAMJ,IAAI,GAAGD,OAAO,EAApB;AACA,SAAO,IAAIC,IAAI,CAACK,GAAL,CAASC,QAAb,CAAuBJ,GAAvB,EAAmDC,OAAnD,EAA4DC,eAA5D,CAAP;AACD,CAHD;;AAKA,SAASL,OAAT,EAAkBE,WAAlB,EAA+BH,gBAA/B","sourcesContent":["import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\nconst constUrlProvider = urlProvider\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(urlProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, constUrlProvider }\n"]},"metadata":{},"sourceType":"module"}