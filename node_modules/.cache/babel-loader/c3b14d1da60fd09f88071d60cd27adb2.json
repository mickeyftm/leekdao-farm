{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\nimport { QuoteToken } from '../../config/constants/types';\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(farmsConfig.map(async farmConfig => {\n    const lpAdress = farmConfig.lpAddresses[CHAIN_ID];\n    const calls = [// Balance of token in the LP contract\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of quote token on LP contract\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'balanceOf',\n      params: [lpAdress]\n    }, // Balance of LP tokens in the master chef contract\n    {\n      address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()]\n    }, // Total supply of LP tokens\n    {\n      address: lpAdress,\n      name: 'totalSupply'\n    }, // Token decimals\n    {\n      address: farmConfig.tokenAddresses[CHAIN_ID],\n      name: 'decimals'\n    }, // Quote token decimals\n    {\n      address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n      name: 'decimals'\n    }];\n    const [tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls);\n    let tokenAmount;\n    let lpTotalInQuoteToken;\n    let tokenPriceVsQuote;\n\n    if (farmConfig.isTokenOnly) {\n      tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n\n      if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n        tokenPriceVsQuote = new BigNumber(1);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n\n      lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n    } else {\n      // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n      const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n      lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n      tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n      const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n      if (tokenAmount.comparedTo(0) > 0) {\n        tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n      } else {\n        tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n      }\n    }\n\n    const [info, totalAllocPoint, leekPerBlock] = await multicall(masterchefABI, [{\n      address: getMasterChefAddress(),\n      name: 'poolInfo',\n      params: [farmConfig.pid]\n    }, {\n      address: getMasterChefAddress(),\n      name: 'totalAllocPoint'\n    }, {\n      address: getMasterChefAddress(),\n      name: 'leekPerBlock'\n    }]);\n    const allocPoint = new BigNumber(info.allocPoint._hex);\n    const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n    return { ...farmConfig,\n      tokenAmount: tokenAmount.toJSON(),\n      // quoteTokenAmount: quoteTokenAmount,\n      lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n      tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n      poolWeight: poolWeight.toNumber(),\n      multiplier: `${allocPoint.div(100).toString()}X`,\n      depositFeeBP: info.depositFeeBP,\n      leekPerBlock: new BigNumber(leekPerBlock).toNumber()\n    };\n  }));\n  return data;\n};\n\nexport default fetchFarms;","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","data","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","lpTotalInQuoteToken","tokenPriceVsQuote","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","times","lpTokenRatio","quoteTokenAmount","comparedTo","info","totalAllocPoint","leekPerBlock","pid","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,8BAA3B;AAEA,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B;;AAEA,MAAMC,UAAU,GAAG,YAAY;AAC7B,QAAMC,IAAI,GAAG,MAAMC,OAAO,CAACC,GAAR,CACjBT,WAAW,CAACU,GAAZ,CAAgB,MAAOC,UAAP,IAAsB;AACpC,UAAMC,QAAQ,GAAGD,UAAU,CAACE,WAAX,CAAuBX,QAAvB,CAAjB;AACA,UAAMY,KAAK,GAAG,CACZ;AACA;AACEC,MAAAA,OAAO,EAAEJ,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CADX;AAEEe,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,MAAM,EAAE,CAACN,QAAD;AAHV,KAFY,EAOZ;AACA;AACEG,MAAAA,OAAO,EAAEJ,UAAU,CAACQ,kBAAX,CAA8BjB,QAA9B,CADX;AAEEe,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,MAAM,EAAE,CAACN,QAAD;AAHV,KARY,EAaZ;AACA;AACEG,MAAAA,OAAO,EAAEJ,UAAU,CAACS,WAAX,GAAyBT,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CAAzB,GAA+DU,QAD1E;AAEEK,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,MAAM,EAAE,CAACnB,oBAAoB,EAArB;AAHV,KAdY,EAmBZ;AACA;AACEgB,MAAAA,OAAO,EAAEH,QADX;AAEEK,MAAAA,IAAI,EAAE;AAFR,KApBY,EAwBZ;AACA;AACEF,MAAAA,OAAO,EAAEJ,UAAU,CAACK,cAAX,CAA0Bd,QAA1B,CADX;AAEEe,MAAAA,IAAI,EAAE;AAFR,KAzBY,EA6BZ;AACA;AACEF,MAAAA,OAAO,EAAEJ,UAAU,CAACQ,kBAAX,CAA8BjB,QAA9B,CADX;AAEEe,MAAAA,IAAI,EAAE;AAFR,KA9BY,CAAd;AAoCA,UAAM,CACJI,cADI,EAEJC,kBAFI,EAGJC,gBAHI,EAIJC,aAJI,EAKJC,aALI,EAMJC,kBANI,IAOF,MAAM5B,SAAS,CAACF,KAAD,EAAQkB,KAAR,CAPnB;AASA,QAAIa,WAAJ;AACA,QAAIC,mBAAJ;AACA,QAAIC,iBAAJ;;AACA,QAAIlB,UAAU,CAACS,WAAf,EAA4B;AAC1BO,MAAAA,WAAW,GAAG,IAAIhC,SAAJ,CAAc4B,gBAAd,EAAgCO,GAAhC,CAAoC,IAAInC,SAAJ,CAAc,EAAd,EAAkBoC,GAAlB,CAAsBN,aAAtB,CAApC,CAAd;;AAEA,UAAId,UAAU,CAACqB,WAAX,KAA2B/B,UAAU,CAACgC,IAAtC,IAA8CtB,UAAU,CAACuB,gBAAX,KAAgCjC,UAAU,CAACgC,IAA7F,EAAmG;AACjGJ,QAAAA,iBAAiB,GAAG,IAAIlC,SAAJ,CAAc,CAAd,CAApB;AACD,OAFD,MAEO;AACLkC,QAAAA,iBAAiB,GAAG,IAAIlC,SAAJ,CAAc2B,kBAAd,EAAkCQ,GAAlC,CAAsC,IAAInC,SAAJ,CAAc0B,cAAd,CAAtC,CAApB;AACD;;AACDO,MAAAA,mBAAmB,GAAGD,WAAW,CAACQ,KAAZ,CAAkBN,iBAAlB,CAAtB;AACD,KATD,MASO;AACL;AACA,YAAMO,YAAY,GAAG,IAAIzC,SAAJ,CAAc4B,gBAAd,EAAgCO,GAAhC,CAAoC,IAAInC,SAAJ,CAAc6B,aAAd,CAApC,CAArB,CAFK,CAGL;;AACAI,MAAAA,mBAAmB,GAAG,IAAIjC,SAAJ,CAAc2B,kBAAd,EACnBQ,GADmB,CACf,IAAInC,SAAJ,CAAc,EAAd,EAAkBoC,GAAlB,CAAsBL,kBAAtB,CADe,EAEnBS,KAFmB,CAEb,IAAIxC,SAAJ,CAAc,CAAd,CAFa,EAGnBwC,KAHmB,CAGbC,YAHa,CAAtB,CAJK,CASL;;AACAT,MAAAA,WAAW,GAAG,IAAIhC,SAAJ,CAAc0B,cAAd,EAA8BS,GAA9B,CAAkC,IAAInC,SAAJ,CAAc,EAAd,EAAkBoC,GAAlB,CAAsBN,aAAtB,CAAlC,EAAwEU,KAAxE,CAA8EC,YAA9E,CAAd;AACA,YAAMC,gBAAgB,GAAG,IAAI1C,SAAJ,CAAc2B,kBAAd,EACtBQ,GADsB,CAClB,IAAInC,SAAJ,CAAc,EAAd,EAAkBoC,GAAlB,CAAsBL,kBAAtB,CADkB,EAEtBS,KAFsB,CAEhBC,YAFgB,CAAzB;;AAIA,UAAIT,WAAW,CAACW,UAAZ,CAAuB,CAAvB,IAA4B,CAAhC,EAAmC;AACjCT,QAAAA,iBAAiB,GAAGQ,gBAAgB,CAACP,GAAjB,CAAqBH,WAArB,CAApB;AACD,OAFD,MAEO;AACLE,QAAAA,iBAAiB,GAAG,IAAIlC,SAAJ,CAAc2B,kBAAd,EAAkCQ,GAAlC,CAAsC,IAAInC,SAAJ,CAAc0B,cAAd,CAAtC,CAApB;AACD;AAGF;;AAED,UAAM,CAACkB,IAAD,EAAOC,eAAP,EAAwBC,YAAxB,IAAwC,MAAM3C,SAAS,CAACD,aAAD,EAAgB,CAC3E;AACEkB,MAAAA,OAAO,EAAEhB,oBAAoB,EAD/B;AAEEkB,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,MAAM,EAAE,CAACP,UAAU,CAAC+B,GAAZ;AAHV,KAD2E,EAM3E;AACE3B,MAAAA,OAAO,EAAEhB,oBAAoB,EAD/B;AAEEkB,MAAAA,IAAI,EAAE;AAFR,KAN2E,EAU3E;AACEF,MAAAA,OAAO,EAAEhB,oBAAoB,EAD/B;AAEEkB,MAAAA,IAAI,EAAE;AAFR,KAV2E,CAAhB,CAA7D;AAgBA,UAAM0B,UAAU,GAAG,IAAIhD,SAAJ,CAAc4C,IAAI,CAACI,UAAL,CAAgBC,IAA9B,CAAnB;AACA,UAAMC,UAAU,GAAGF,UAAU,CAACb,GAAX,CAAe,IAAInC,SAAJ,CAAc6C,eAAd,CAAf,CAAnB;AAEA,WAAO,EACL,GAAG7B,UADE;AAELgB,MAAAA,WAAW,EAAEA,WAAW,CAACmB,MAAZ,EAFR;AAGL;AACAlB,MAAAA,mBAAmB,EAAEA,mBAAmB,CAACkB,MAApB,EAJhB;AAKLjB,MAAAA,iBAAiB,EAAEA,iBAAiB,CAACiB,MAAlB,EALd;AAMLD,MAAAA,UAAU,EAAEA,UAAU,CAACE,QAAX,EANP;AAOLC,MAAAA,UAAU,EAAG,GAAEL,UAAU,CAACb,GAAX,CAAe,GAAf,EAAoBmB,QAApB,EAA+B,GAPzC;AAQLC,MAAAA,YAAY,EAAEX,IAAI,CAACW,YARd;AASLT,MAAAA,YAAY,EAAE,IAAI9C,SAAJ,CAAc8C,YAAd,EAA4BM,QAA5B;AATT,KAAP;AAWD,GAjHD,CADiB,CAAnB;AAoHA,SAAOxC,IAAP;AACD,CAtHD;;AAwHA,eAAeD,UAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals,\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount\n      let lpTotalInQuoteToken\n      let tokenPriceVsQuote\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals))\n\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote)\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount)\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP))\n        }\n\n\n      }\n\n      const [info, totalAllocPoint, leekPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'leekPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        leekPerBlock: new BigNumber(leekPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n"]},"metadata":{},"sourceType":"module"}