{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useCake, useLottery } from './useContract';\nimport { getAllowance } from '../utils/erc20';\nimport useRefresh from './useRefresh'; // Retrieve lottery allowance\n\nexport const useLotteryAllowance = () => {\n  _s();\n\n  const [allowance, setAllowance] = useState(new BigNumber(0));\n  const {\n    account\n  } = useWallet();\n  const lotteryContract = useLottery();\n  const cakeContract = useCake();\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account);\n      setAllowance(new BigNumber(res));\n    };\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance();\n    }\n\n    const refreshInterval = setInterval(fetchAllowance, 10000);\n    return () => clearInterval(refreshInterval);\n  }, [account, cakeContract, lotteryContract]);\n  return allowance;\n}; // Retrieve IFO allowance\n\n_s(useLotteryAllowance, \"wGosQaA5RlTVrQ/mf1uyoFeAK00=\", false, function () {\n  return [useWallet, useLottery, useCake];\n});\n\nexport const useIfoAllowance = (tokenContract, spenderAddress, dependency) => {\n  _s2();\n\n  const {\n    account\n  } = useWallet();\n  const [allowance, setAllowance] = useState(null);\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call();\n        setAllowance(new BigNumber(res));\n      } catch (e) {\n        setAllowance(null);\n      }\n    };\n\n    fetch();\n  }, [account, spenderAddress, tokenContract, dependency]);\n  return allowance;\n}; // Retrieve Billboard Allowance\n\n_s2(useIfoAllowance, \"q9ROkN0QXR56czc3npru2vScrDg=\", false, function () {\n  return [useWallet];\n});\n\nexport const useBillboardAllowance = (tokenContract, spenderAddress) => {\n  _s3();\n\n  const {\n    account\n  } = useWallet();\n  const [allowance, setAllowance] = useState(null);\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call();\n        setAllowance(new BigNumber(res));\n      } catch (e) {\n        setAllowance(null);\n      }\n    };\n\n    fetch();\n  }, [account, spenderAddress, tokenContract, fastRefresh]);\n  return allowance;\n};\n\n_s3(useBillboardAllowance, \"fCTbDzXhcCG3AKfy/c6ouX6K0Ng=\", false, function () {\n  return [useWallet, useRefresh];\n});","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/hooks/useAllowance.ts"],"names":["useEffect","useState","BigNumber","useWallet","useCake","useLottery","getAllowance","useRefresh","useLotteryAllowance","allowance","setAllowance","account","lotteryContract","cakeContract","fetchAllowance","res","refreshInterval","setInterval","clearInterval","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","methods","call","e","useBillboardAllowance","fastRefresh"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n\n\n// Retrieve Billboard Allowance\nexport const useBillboardAllowance = (tokenContract: Contract, spenderAddress: string) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, fastRefresh])\n\n  return allowance\n}\n"]},"metadata":{},"sourceType":"module"}