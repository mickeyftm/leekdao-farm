{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Ifos/components/IfoCard/ParticipateModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet'; // import BigNumber from 'bignumber.js'\n\nimport { Modal, Button, Flex, useModal } from 'leek-uikit';\nimport BalanceInput from 'components/Input/BalanceInput';\nimport { getBalanceNumber, getMainTokenBalance } from 'utils/formatBalance';\nimport BigNumber from 'bignumber.js';\nimport TransactionSubmittedContent from './TransactionSubmittedContent';\nimport ConfirmationPendingContent from './ConfirmationPendingContent';\nimport store from '../../store/store';\nimport { GET_TRANSACTION_HASH } from '../../store/reducer';\n\nconst ParticipateModal = ({\n  tokenName,\n  onDismiss = () => null,\n  contract,\n  mainToken,\n  rate\n}) => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const wallet = useWallet();\n  const balance = getBalanceNumber(new BigNumber(wallet.balance)).toFixed(4);\n  const {\n    account\n  } = useWallet();\n  const inputValue = getMainTokenBalance(new BigNumber(value));\n\n  const buyTokens = async () => {\n    onPresentPendingModal();\n    const result = await contract.methods.buyTokens(account).send({\n      from: account,\n      value: inputValue\n    });\n\n    if (result) {\n      const action = {\n        type: GET_TRANSACTION_HASH,\n        hash: result.transactionHash\n      };\n      store.dispatch(action);\n      onPresentSubmittedModal();\n    }\n  };\n\n  const [onPresentPendingModal] = useModal( /*#__PURE__*/_jsxDEV(ConfirmationPendingContent, {\n    onDismiss: onDismiss\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 44\n  }, this));\n  const [onPresentSubmittedModal] = useModal( /*#__PURE__*/_jsxDEV(TransactionSubmittedContent, {\n    onDismiss: onDismiss\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 46\n  }, this));\n  const isValueInValid = Number(value) === 0;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Modal, {\n      title: \"Participate LEEK IDO\",\n      onDismiss: onDismiss,\n      children: [/*#__PURE__*/_jsxDEV(BalanceInput, {\n        value: value,\n        onChange: e => setValue(e.currentTarget.value),\n        symbol: mainToken,\n        max: balance,\n        onSelectMax: () => setValue(balance),\n        rate: rate,\n        token: tokenName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          mr: \"8px\",\n          onClick: buyTokens,\n          disabled: isValueInValid,\n          children: [\"Buy \", tokenName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          mr: \"8px\",\n          onClick: onDismiss,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ParticipateModal, \"/h1mATtnwYYpQ9Hzs1FcqVoC118=\", false, function () {\n  return [useWallet, useWallet, useModal, useModal];\n});\n\n_c = ParticipateModal;\nexport default ParticipateModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ParticipateModal\");","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Ifos/components/IfoCard/ParticipateModal.tsx"],"names":["React","useState","useWallet","Modal","Button","Flex","useModal","BalanceInput","getBalanceNumber","getMainTokenBalance","BigNumber","TransactionSubmittedContent","ConfirmationPendingContent","store","GET_TRANSACTION_HASH","ParticipateModal","tokenName","onDismiss","contract","mainToken","rate","value","setValue","wallet","balance","toFixed","account","inputValue","buyTokens","onPresentPendingModal","result","methods","send","from","action","type","hash","transactionHash","dispatch","onPresentSubmittedModal","isValueInValid","Number","e","currentTarget"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\n// import BigNumber from 'bignumber.js'\nimport { Modal, Button, Flex, useModal } from 'leek-uikit'\nimport BalanceInput from 'components/Input/BalanceInput'\nimport { getBalanceNumber, getMainTokenBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\nimport TransactionSubmittedContent from './TransactionSubmittedContent'\nimport ConfirmationPendingContent from './ConfirmationPendingContent'\nimport store from '../../store/store'\nimport { GET_TRANSACTION_HASH } from '../../store/reducer'\n\ninterface Props {\n  tokenName: string\n  onDismiss?: () => void\n  contract: any\n  mainToken: string\n  rate: number\n}\n\nconst ParticipateModal: React.FC<Props> = ({ tokenName, onDismiss = () => null, contract, mainToken, rate }) => {\n  const [value, setValue] = useState('')\n  const wallet = useWallet()\n  const balance = getBalanceNumber(new BigNumber(wallet.balance)).toFixed(4)\n  const { account } = useWallet()\n  const inputValue = getMainTokenBalance(new BigNumber(value))\n\n  const buyTokens = async () => {\n    onPresentPendingModal()\n    const result = await contract.methods.buyTokens(account).send({ from: account, value: inputValue })\n    if (result) {\n      const action = {\n        type: GET_TRANSACTION_HASH,\n        hash: result.transactionHash,\n      }\n      store.dispatch(action)\n      onPresentSubmittedModal()\n    }\n  }\n\n  const [onPresentPendingModal] = useModal(<ConfirmationPendingContent onDismiss={onDismiss} />)\n  const [onPresentSubmittedModal] = useModal(<TransactionSubmittedContent onDismiss={onDismiss} />)\n\n  const isValueInValid = Number(value) === 0\n\n  return (\n    <>\n      <Modal title=\"Participate LEEK IDO\" onDismiss={onDismiss}>\n        <BalanceInput\n          value={value}\n          onChange={(e) => setValue(e.currentTarget.value)}\n          symbol={mainToken}\n          max={balance}\n          onSelectMax={() => setValue(balance)}\n          rate={rate}\n          token={tokenName}\n        />\n        <Flex justifyContent=\"space-between\" mb=\"24px\">\n          <Button variant=\"primary\" mr=\"8px\" onClick={buyTokens} disabled={isValueInValid}>\n            Buy {tokenName}\n          </Button>\n\n          <Button variant=\"secondary\" mr=\"8px\" onClick={onDismiss}>\n            Cancel\n          </Button>\n        </Flex>\n      </Modal>\n    </>\n  )\n}\n\nexport default ParticipateModal\n"]},"metadata":{},"sourceType":"module"}