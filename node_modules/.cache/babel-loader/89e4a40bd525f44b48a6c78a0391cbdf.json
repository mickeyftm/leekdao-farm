{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Voting/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Card, Heading } from 'leek-uikit';\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport Container from 'components/layout/Container';\nimport { ProposalType, ProposalState } from 'state/types';\nimport styled from \"styled-components\";\nimport TabMenu from './components/TabMenu';\nimport Filters from './components/Filters';\nimport ProposalRow from './components/ProposalRow';\nimport Hero from './Hero';\nconst Title = styled(Heading).attrs({\n  as: 'h1',\n  size: 'xl'\n})`\n  color: ${({\n  theme\n}) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`;\n_c = Title;\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) graphQLErrors.map(({\n    message,\n    locations,\n    path\n  }) => console.warn(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`));\n  if (networkError) console.warn(`[Network error]: ${networkError}`);\n});\nconst link = from([errorLink, new HttpLink({\n  uri: \"https://hub.snapshot.page/graphql\"\n})]);\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link\n});\n\nconst Proposals = () => {\n  _s();\n\n  const [state, setState] = useState({\n    proposalType: ProposalType.CORE,\n    filterState: ProposalState.ACTIVE\n  });\n\n  const handleProposalTypeChange = newProposalType => {\n    setState(prevState => ({ ...prevState,\n      proposalType: newProposalType\n    }));\n  };\n\n  const handleFilterChange = newFilterState => {\n    setState(prevState => ({ ...prevState,\n      filterState: newFilterState\n    }));\n  };\n\n  const {\n    proposalType,\n    filterState\n  } = state;\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: [/*#__PURE__*/_jsxDEV(Hero, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Proposals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: [/*#__PURE__*/_jsxDEV(TabMenu, {\n          proposalType: proposalType,\n          onTypeChange: handleProposalTypeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Filters, {\n          filterState: filterState,\n          onFilterChange: handleFilterChange,\n          isLoading: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ProposalRow, {\n          state: filterState,\n          type: proposalType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Proposals, \"O8Jf68qWlfl1zytG17iDGuZQJPo=\");\n\n_c2 = Proposals;\nexport default Proposals;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Title\");\n$RefreshReg$(_c2, \"Proposals\");","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/views/Voting/index.tsx"],"names":["React","useState","Card","Heading","ApolloClient","InMemoryCache","ApolloProvider","HttpLink","from","onError","Container","ProposalType","ProposalState","styled","TabMenu","Filters","ProposalRow","Hero","Title","attrs","as","size","theme","colors","secondary","errorLink","graphQLErrors","networkError","map","message","locations","path","console","warn","link","uri","client","cache","Proposals","state","setState","proposalType","CORE","filterState","ACTIVE","handleProposalTypeChange","newProposalType","prevState","handleFilterChange","newFilterState"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Card, Heading } from 'leek-uikit'\nimport { ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from } from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\nimport Container from 'components/layout/Container'\nimport { ProposalType, ProposalState } from 'state/types'\nimport styled from \"styled-components\"\nimport TabMenu from './components/TabMenu'\nimport Filters from './components/Filters'\nimport ProposalRow from './components/ProposalRow'\nimport Hero from './Hero'\n\ninterface State {\n    proposalType: ProposalType\n    filterState: ProposalState\n}\n\nconst Title = styled(Heading).attrs({ as: 'h1', size: 'xl' })`\n  color: ${({ theme }) => theme.colors.secondary};\n  margin-bottom: 24px;\n  margin-top:20px;\n`\n\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors)\n        graphQLErrors.map(({ message, locations, path }) =>\n            console.warn(\n                `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n            )\n        );\n    if (networkError) console.warn(`[Network error]: ${networkError}`);\n});\n\nconst link = from([\n    errorLink,\n    new HttpLink({ uri: \"https://hub.snapshot.page/graphql\" }),\n]);\n\nconst client = new ApolloClient({\n    cache: new InMemoryCache(),\n    link,\n});\n\nconst Proposals = () => {\n    const [state, setState] = useState<State>({\n        proposalType: ProposalType.CORE,\n        filterState: ProposalState.ACTIVE,\n    })\n\n    const handleProposalTypeChange = (newProposalType: ProposalType) => {\n        setState((prevState) => ({\n            ...prevState,\n            proposalType: newProposalType,\n        }))\n    }\n\n    const handleFilterChange = (newFilterState: ProposalState) => {\n        setState((prevState) => ({\n            ...prevState,\n            filterState: newFilterState,\n        }))\n    }\n    const { proposalType, filterState } = state\n\n    return (\n        <ApolloProvider client={client}>\n            <Hero />\n            <Container>\n                <Title>Proposals</Title>\n                <Card>\n                    <TabMenu proposalType={proposalType} onTypeChange={handleProposalTypeChange} />\n                    <Filters filterState={filterState} onFilterChange={handleFilterChange} isLoading={false} />\n                    <ProposalRow state={filterState} type={proposalType} />\n                </Card>\n            </Container>\n        </ApolloProvider>\n    )\n}\n\nexport default Proposals\n"]},"metadata":{},"sourceType":"module"}