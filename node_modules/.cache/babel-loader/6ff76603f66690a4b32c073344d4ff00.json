{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport Web3 from 'web3';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport getNodeUrl from 'utils/getRpcUrl';\nconst NODE_URL = getNodeUrl();\nlet urlProvider;\n\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, {\n    timeout: 10000\n  });\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL);\n}\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\n\n\nconst useWeb3 = () => {\n  _s();\n\n  const {\n    ethereum\n  } = useWallet();\n  const refEth = useRef(ethereum);\n  const [web3, setweb3] = useState(new Web3(ethereum || urlProvider));\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || urlProvider));\n      refEth.current = ethereum;\n    }\n  }, [ethereum]);\n  return web3;\n};\n\n_s(useWeb3, \"6jiBNKiTSoS3x3kuY9Ybf7ROpOw=\", false, function () {\n  return [useWallet];\n});\n\nexport default useWeb3;","map":{"version":3,"sources":["/Users/shuowang/ETM/Leekdao/leekdao-farm/src/hooks/useWeb3.ts"],"names":["useEffect","useState","useRef","Web3","useWallet","getNodeUrl","NODE_URL","urlProvider","startsWith","providers","HttpProvider","timeout","WebsocketProvider","useWeb3","ethereum","refEth","web3","setweb3","current"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,UAAP,MAAuB,iBAAvB;AAEA,MAAMC,QAAQ,GAAGD,UAAU,EAA3B;AAEA,IAAIE,WAAJ;;AACA,IAAID,QAAQ,CAACE,UAAT,CAAoB,UAApB,CAAJ,EAAqC;AACnCD,EAAAA,WAAW,GAAG,IAAIJ,IAAI,CAACM,SAAL,CAAeC,YAAnB,CAAgCJ,QAAhC,EAA0C;AAAEK,IAAAA,OAAO,EAAE;AAAX,GAA1C,CAAd;AACD,CAFD,MAEO,IAAIL,QAAQ,CAACE,UAAT,CAAoB,QAApB,CAAJ,EAAmC;AACxCD,EAAAA,WAAW,GAAG,IAAIJ,IAAI,CAACM,SAAL,CAAeG,iBAAnB,CAAqCN,QAArC,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,MAAMO,OAAO,GAAG,MAAM;AAAA;;AACpB,QAAM;AAAEC,IAAAA;AAAF,MAA2CV,SAAS,EAA1D;AACA,QAAMW,MAAM,GAAGb,MAAM,CAACY,QAAD,CAArB;AACA,QAAM,CAACE,IAAD,EAAOC,OAAP,IAAkBhB,QAAQ,CAAC,IAAIE,IAAJ,CAASW,QAAQ,IAAIP,WAArB,CAAD,CAAhC;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,QAAQ,KAAKC,MAAM,CAACG,OAAxB,EAAiC;AAC/BD,MAAAA,OAAO,CAAC,IAAId,IAAJ,CAASW,QAAQ,IAAIP,WAArB,CAAD,CAAP;AACAQ,MAAAA,MAAM,CAACG,OAAP,GAAiBJ,QAAjB;AACD;AACF,GALQ,EAKN,CAACA,QAAD,CALM,CAAT;AAOA,SAAOE,IAAP;AACD,CAbD;;GAAMH,O;UAC6CT,S;;;AAcnD,eAAeS,OAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { provider as ProviderType } from 'web3-core'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport getNodeUrl from 'utils/getRpcUrl'\n\nconst NODE_URL = getNodeUrl()\n\nlet urlProvider: any\nif (NODE_URL.startsWith('https://')) {\n  urlProvider = new Web3.providers.HttpProvider(NODE_URL, { timeout: 10000 } as HttpProviderOptions)\n} else if (NODE_URL.startsWith('wss://')) {\n  urlProvider = new Web3.providers.WebsocketProvider(NODE_URL)\n}\n\n/**\n * Provides a web3 instance using the provider provided by useWallet\n * with a fallback of an httpProver\n * Recreate web3 instance only if the ethereum provider change\n */\nconst useWeb3 = () => {\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\n  const refEth = useRef(ethereum)\n  const [web3, setweb3] = useState(new Web3(ethereum || urlProvider))\n\n  useEffect(() => {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || urlProvider))\n      refEth.current = ethereum\n    }\n  }, [ethereum])\n\n  return web3\n}\n\nexport default useWeb3\n"]},"metadata":{},"sourceType":"module"}